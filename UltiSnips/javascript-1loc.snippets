

snippet 1loccastArray "Cast a value as an array"
/* Cast a value as an array */
const castArray = (value) => (Array.isArray(value) ? value : [value]);
endsnippet

snippet 1locisEmpty "Check if an array is empty"
/* Check if an array is empty */
const isEmpty = (arr) => !Array.isArray(arr) || arr.length === 0;
endsnippet

snippet 1locclone "Clone an array"
/* Clone an array */
const clone = (arr) => arr.slice(0)
// Similar 👇🏼,  const clone = (arr) => [...arr],  const clone = (arr) => Array.from(arr),  const clone = (arr) => arr.map((x) => x),  const clone = (arr) => JSON.parse(JSON.stringify(arr)),  const clone = (arr) => arr.concat([]);
endsnippet

snippet 1locisEqual "Compare two arrays regardless of order"
/* Compare two arrays regardless of order */
const isEqual = (a, b) => JSON.stringify(a.sort()) === JSON.stringify(b.sort());
endsnippet

snippet 1locisEqual "Compare two arrays"
/* Compare two arrays */
const isEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b)
// Similar 👇🏼,  const isEqual = (a, b) => a.length === b.length && a.every((v, i) => v === b[i]);
endsnippet

snippet 1loctoObject "Convert an array of objects to a single object"
/* Convert an array of objects to a single object */
const toObject = (arr, key) => arr.reduce((a, b) => ({ ...a, [b[key]]: b }), {})
// Similar 👇🏼,  const toObject = (arr, key) => Object.fromEntries(arr.map((it) => [it[key], it]));
endsnippet

snippet 1loctoNumbers "Convert an array of strings to numbers"
/* Convert an array of strings to numbers */
const toNumbers = (arr) => arr.map(Number)
// Similar 👇🏼,  const toNumbers = (arr) => arr.map((x) => +x);
endsnippet

snippet 1loccountBy "Count by the properties of an array of objects"
/* Count by the properties of an array of objects */
const countBy = (arr, prop) => arr.reduce((prev, curr) => ((prev[curr[prop]] = ++prev[curr[prop]] || 1), prev), {});
endsnippet

snippet 1loccountOccurrences "Count the occurrences of a value in an array"
/* Count the occurrences of a value in an array */
const countOccurrences = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0)
// Similar 👇🏼,  const countOccurrences = (arr, val) => arr.filter((item) => item === val).length;
endsnippet

snippet 1loccountOccurrences "Count the occurrences of array elements"
/* Count the occurrences of array elements */
const countOccurrences = (arr) => arr.reduce((prev, curr) => ((prev[curr] = ++prev[curr] || 1), prev), {});
endsnippet

snippet 1locaccumulate "Create an array of cumulative sum"
/* Create an array of cumulative sum */
const accumulate = (arr) => arr.map(((sum) => (value) => (sum += value))(0))
// Similar 👇🏼,  const accumulate = (arr) => arr.reduce((a, b, i) => (i === 0 ? [b] : [...a, b + a[i - 1]]), [0]);
endsnippet

snippet 1locrange "Create an array of numbers in the given range"
/* Create an array of numbers in the given range */
const range = (min, max) => [...Array(max - min + 1).keys()].map((i) => i + min)
// Similar 👇🏼,  const range = (min, max) => Array(max - min + 1).fill(0).map((_, i) => min + i),  const range = (min, max) => Array.from({ length: max - min + 1 \}, (_, i) => min + i);
endsnippet

snippet 1loccartesian "Create cartesian product"
/* Create cartesian product */
const cartesian = (...sets) => sets.reduce((acc, set) => acc.flatMap((x) => set.map((y) => [...x, y])), [[]]);
endsnippet

snippet 1locempty "Empty an array"
/* Empty an array */
const empty = (arr) => (arr.length = 0);arr = [];
endsnippet

snippet 1locclosest "Find the closest number from an array"
/* Find the closest number from an array */
const closest = (arr, n) => arr.reduce((prev, curr) => (Math.abs(curr - n) < Math.abs(prev - n) ? curr : prev))
// Similar 👇🏼,  const closest = (arr, n) => arr.sort((a, b) => Math.abs(a - n) - Math.abs(b - n))[0];
endsnippet

snippet 1loclastIndex "Find the index of the last matching item of an array"
/* Find the index of the last matching item of an array */
const lastIndex = (arr, predicate) => arr.reduce((prev, curr, index) => (predicate(curr) ? index : prev), -1)
// Similar 👇🏼,  const lastIndex = (arr, predicate) => arr.map((item) => predicate(item)).lastIndexOf(true);
endsnippet

snippet 1locindexOfMax "Find the index of the maximum item of an array"
/* Find the index of the maximum item of an array */
const indexOfMax = (arr) => arr.reduce((prev, curr, i, a) => (curr > a[prev] ? i : prev), 0);
endsnippet

snippet 1locindexOfMin "Find the index of the minimum item of an array"
/* Find the index of the minimum item of an array */
const indexOfMin = (arr) => arr.reduce((prev, curr, i, a) => (curr < a[prev] ? i : prev), 0);
endsnippet

snippet 1locfindLongest "Find the length of the longest string in an array"
/* Find the length of the longest string in an array */
const findLongest = (words) => Math.max(...words.map((el) => el.length));
endsnippet

snippet 1locmaxBy "Find the maximum item of an array by given key"
/* Find the maximum item of an array by given key */
const maxBy = (arr, key) => arr.reduce((a, b) => (a[key] >= b[key] ? a : b), {});
endsnippet

snippet 1locmax "Find the maximum item of an array"
/* Find the maximum item of an array */
const max = (arr) => Math.max(...arr);
endsnippet

snippet 1locminBy "Find the minimum item of an array by given key"
/* Find the minimum item of an array by given key */
const minBy = (arr, key) => arr.reduce((a, b) => (a[key] < b[key] ? a : b), {});
endsnippet

snippet 1locmin "Find the minimum item of an array"
/* Find the minimum item of an array */
const min = (arr) => Math.min(...arr);
endsnippet

snippet 1locflat "Flatten an array"
/* Flatten an array */
const flat = (arr) => [].concat.apply([], arr.map((a) => (Array.isArray(a) ? flat(a) : a)))
// Similar 👇🏼,  const flat = (arr) => arr.reduce((a, b) => (Array.isArray(b) ? [...a, ...flat(b)] : [...a, b]), []),  const flat = (arr) => arr.flat();
endsnippet

snippet 1localphabet "Generate an array of alphabet characters"
/* Generate an array of alphabet characters */
const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('')
// Similar 👇🏼,  const alphabet = [...'abcdefghijklmnopqrstuvwxyz'],  const alphabet = Array(26).fill(0).map((_, i) => String.fromCharCode(i + 97)),  const alphabet = [...Array(26).keys()].map((i) => String.fromCharCode(i + 97)),  const alphabet = [...Array(26)].map((_, i) => (i + 10).toString(36)),  const alphabet = String.fromCharCode(...' '.repeat(26).split('').map((_, i) => i + 97)).split('');
endsnippet

snippet 1locgetConsecutiveArrays "Get all arrays of consecutive elements"
/* Get all arrays of consecutive elements */
const getConsecutiveArrays = (arr, size) => (size > arr.length ? [] : arr.slice(size - 1).map((_, i) => arr.slice(i, size + i)));
endsnippet

snippet 1locgetNthItems "Get all n-th items of an array"
/* Get all n-th items of an array */
const getNthItems = (arr, nth) => arr.filter((_, i) => i % nth === nth - 1);
endsnippet

snippet 1locgetSubsets "Get all subsets of an array"
/* Get all subsets of an array */
const getSubsets = (arr) => arr.reduce((prev, curr) => prev.concat(prev.map((k) => k.concat(curr))), [[]]);
endsnippet

snippet 1locindices "Get indices of a value in an array"
/* Get indices of a value in an array */
const indices = (arr, value) => arr.reduce((acc, v, i) => (v === value ? [...acc, i] : acc), [])
// Similar 👇🏼,  const indices = (arr, value) => arr.map((v, i) => (v === value ? i : false)).filter(Boolean);
endsnippet

snippet 1locaverage "Get the average of an array"
/* Get the average of an array */
const average = (arr) => arr.reduce((a, b) => a + b, 0) / arr.length;
endsnippet

snippet 1locgetIntersection "Get the intersection of arrays"
/* Get the intersection of arrays */
const getIntersection = (a, ...arr) => [...new Set(a)].filter((v) => arr.every((b) => b.includes(v)));
endsnippet

snippet 1locranking "Get the rank of an array of numbers"
/* Get the rank of an array of numbers */
const ranking = (arr) => arr.map((x, y, z) => z.filter((w) => w > x).length + 1);
endsnippet

snippet 1locsum "Get the sum of an array of numbers"
/* Get the sum of an array of numbers */
const sum = (arr) => arr.reduce((a, b) => a + b, 0);
endsnippet

snippet 1locunique "Get the unique values of an array"
/* Get the unique values of an array */
const unique = (arr) => [...new Set(arr)]
// Similar 👇🏼,  const unique = (arr) => arr.filter((el, i, array) => array.indexOf(el) === i),  const unique = (arr) => arr.reduce((acc, el) => (acc.includes(el) ? acc : [...acc, el]), []);
endsnippet

snippet 1locunion "Get union of arrays"
/* Get union of arrays */
const union = (...arr) => [...new Set(arr.flat())];
endsnippet

snippet 1locgroupBy "Group an array of objects by a key"
/* Group an array of objects by a key */
const groupBy = (arr, key) => arr.reduce((acc, item) => ((acc[item[key]] = [...(acc[item[key]] || []), item]), acc), {});
endsnippet

snippet 1locmerge "Merge two arrays"
/* Merge two arrays */
const merge = (a, b) => a.concat(b)
// Similar 👇🏼,  const merge = (a, b) => [...a, ...b],  const merge = (a, b) => [...new Set(a.concat(b))],  const merge = (a, b) => [...new Set([...a, ...b])];
endsnippet

snippet 1locpartition "Partition an array based on a condition"
/* Partition an array based on a condition */
const partition = (arr, criteria) => arr.reduce((acc, i) => (acc[criteria(i) ? 0 : 1].push(i), acc), [[], []]);
endsnippet

snippet 1locremoveDuplicate "Remove duplicate values in an array"
/* Remove duplicate values in an array */
const removeDuplicate = (arr) => arr.filter((i) => arr.indexOf(i) === arr.lastIndexOf(i));
endsnippet

snippet 1locremoveFalsy "Remove falsy values from array"
/* Remove falsy values from array */
const removeFalsy = (arr) => arr.filter(Boolean);
endsnippet

snippet 1locrepeat "Repeat an array"
/* Repeat an array */
const repeat = (arr, n) => [].concat(...Array(n).fill(arr))
// Similar 👇🏼,  const repeat = (arr, n) => Array(n).fill(arr).flat(),  const repeat = (arr, n) => Array(arr.length * n).fill(0).map((_, i) => arr[i % arr.length]),  const repeat = (arr, n) => Array.from({ length: arr.length * n \}, (_, i) => arr[i % arr.length]);
endsnippet

snippet 1locshuffle "Shuffle an array"
/* Shuffle an array */
const shuffle = (arr) => arr.map((a) => ({ sort: Math.random(), value: a })).sort((a, b) => a.sort - b.sort).map((a) => a.value)
// Similar 👇🏼,  const shuffle = (arr) => arr.sort(() => 0.5 - Math.random());
endsnippet

snippet 1locsortBy "Sort an array of items by given key"
/* Sort an array of items by given key */
const sortBy = (arr, k) => arr.concat().sort((a, b) => (a[k] > b[k] ? 1 : a[k] < b[k] ? -1 : 0));
endsnippet

snippet 1locsort "Sort an array of numbers"
/* Sort an array of numbers */
const sort = (arr) => arr.sort((a, b) => a - b);
endsnippet

snippet 1locchunk "Split an array into chunks"
/* Split an array into chunks */
const chunk = (arr, size) => arr.reduce((acc, e, i) => (i % size ? acc[acc.length - 1].push(e) : acc.push([e]), acc), []);
endsnippet

snippet 1loctranspose "Swap the rows and columns of a matrix"
/* Swap the rows and columns of a matrix */
const transpose = (matrix) => matrix[0].map((col, i) => matrix.map((row) => row[i]))
// Similar 👇🏼,  const transpose = (matrix) => matrix[0].map((col, c) => matrix.map((row, r) => matrix[r][c])),  const transpose = (matrix) => matrix.reduce((prev, next) => next.map((item, i) => (prev[i] || []).concat(next[i])), []);
endsnippet

snippet 1locswapItems "Swap two array items"
/* Swap two array items */
const swapItems = (a, i, j) => (a[i] && a[j] && [...a.slice(0, i), a[j], ...a.slice(i + 1, j), a[i], ...a.slice(j + 1)]) || a;
endsnippet

snippet 1locunzip "Unzip an array of arrays"
/* Unzip an array of arrays */
const unzip = (arr) => arr.reduce((acc, c) => (c.forEach((v, i) => acc[i].push(v)), acc), Array.from({ length: Math.max(...arr.map((a) => a.length)) }, (_) => []));
endsnippet

snippet 1loczip "Zip multiple arrays"
/* Zip multiple arrays */
const zip = (...arr) => Array.from({ length: Math.max(...arr.map((a) => a.length)) }, (_, i) => arr.map((a) => a[i]));
endsnippet

snippet 1locsuffixAmPm "Add AM PM suffix to an hour"
/* Add AM PM suffix to an hour */
const suffixAmPm = (h) => `${h % 12 === 0 ? 12 : h % 12}${h < 12 ? 'am' : 'pm'}`;
endsnippet

snippet 1locdiffDays "Calculate the number of difference days between two dates"
/* Calculate the number of difference days between two dates */
const diffDays = (date, otherDate) => Math.ceil(Math.abs(date - otherDate) / (1000 * 60 * 60 * 24));
endsnippet

snippet 1locmonthDiff "Calculate the number of months between two dates"
/* Calculate the number of months between two dates */
const monthDiff = (startDate, endDate) => Math.max(0, (endDate.getFullYear() - startDate.getFullYear()) * 12 - startDate.getMonth() + endDate.getMonth());
endsnippet

snippet 1loccompare "Compare two dates"
/* Compare two dates */
const compare = (a, b) => a.getTime() > b.getTime();
endsnippet

snippet 1locformatYmd "Convert a date to YYYY-MM-DD format"
/* Convert a date to YYYY-MM-DD format */
const formatYmd = (date) => date.toISOString().slice(0, 10);
endsnippet

snippet 1locformatSeconds "Convert seconds to hh:mm:ss format"
/* Convert seconds to hh:mm:ss format */
const formatSeconds = (s) => new Date(s * 1000).toISOString().substr(11, 8)
// Similar 👇🏼,  const formatSeconds = (s) => new Date(s * 1000).toUTCString().match(/(\d\d:\d\d:\d\d)/)[0],  const formatSeconds = (s) => [parseInt(s / 60 / 60), parseInt((s / 60) % 60), parseInt(s % 60)].join(':').replace(/\b(\d)\b/g, '0\$1');
endsnippet

snippet 1locextract "Extract year, month, day, hour, minute, second and millisecond from a date"
/* Extract year, month, day, hour, minute, second and millisecond from a date */
const extract = (date) => date.toISOString().split(/[^0-9]/).slice(0, -1);
endsnippet

snippet 1locformat "Format a date for the given locale"
/* Format a date for the given locale */
const format = (date, locale) => new Intl.DateTimeFormat(locale).format(date);
endsnippet

snippet 1locgetQuarter "Get the current quarter of a date"
/* Get the current quarter of a date */
const getQuarter = (d = new Date()) => Math.ceil((d.getMonth() + 1) / 3);
endsnippet

snippet 1locts "Get the current timestamp in seconds"
/* Get the current timestamp in seconds */
const ts = () => Math.floor(new Date().getTime() / 1000);
endsnippet

snippet 1locdayOfYear "Get the day of the year from a date"
/* Get the day of the year from a date */
const dayOfYear = (date) => Math.floor((date - new Date(date.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));
endsnippet

snippet 1locgetFirstDate "Get the first date in the month of a date"
/* Get the first date in the month of a date */
const getFirstDate = (d = new Date()) => new Date(d.getFullYear(), d.getMonth(), 1);
endsnippet

snippet 1locgetLastDate "Get the last date in the month of a date"
/* Get the last date in the month of a date */
const getLastDate = (d = new Date()) => new Date(d.getFullYear(), d.getMonth() + 1, 0);
endsnippet

snippet 1locgetMonthName "Get the month name of a date"
/* Get the month name of a date */
const getMonthName = (date) => ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', ' November', 'December'][date.getMonth()];
endsnippet

snippet 1locdaysInMonth "Get the number of days in given month"
/* Get the number of days in given month */
const daysInMonth = (month, year) => new Date(year, month, 0).getDate();
endsnippet

snippet 1locgetTimezone "Get the timezone string"
/* Get the timezone string */
const getTimezone = () => Intl.DateTimeFormat().resolvedOptions().timeZone;
endsnippet

snippet 1loctomorrow "Get the tomorrow date"
/* Get the tomorrow date */
const tomorrow = ((d) => new Date(d.setDate(d.getDate() + 1)))(new Date())
// Similar 👇🏼,  const tomorrow = new Date(new Date().valueOf() + 1000 * 60 * 60 * 24);
endsnippet

snippet 1locnumberOfDays "Get the total number of days in a year"
/* Get the total number of days in a year */
const numberOfDays = (year) => ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0 ? 366 : 365)
// Similar 👇🏼,  const numberOfDays = (year) => (new Date(year, 1, 29).getDate() === 29 ? 366 : 365);
endsnippet

snippet 1locgetWeekday "Get the weekday of a date"
/* Get the weekday of a date */
const getWeekday = (date) => ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][date.getDay()];
endsnippet

snippet 1locyesterday "Get the yesterday date"
/* Get the yesterday date */
const yesterday = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date())
// Similar 👇🏼,  const yesterday = new Date(new Date().valueOf() - 1000 * 60 * 60 * 24);
endsnippet

snippet 1locmidnightOfToday "Initialize the current date but set time to midnight"
/* Initialize the current date but set time to midnight */
const midnightOfToday = () => new Date(new Date().setHours(0, 0, 0, 0));
endsnippet

snippet 1locsortDescending "Sort an array of dates"
/* Sort an array of dates */
const sortDescending = (arr) => arr.sort((a, b) => a.getTime() > b.getTime())
// Similar 👇🏼,  const sortAscending = (arr) => arr.sort((a, b) => a.getTime() < b.getTime());
endsnippet

snippet 1locisDescendant "Check if an element is a descendant of another"
/* Check if an element is a descendant of another */
const isDescendant = (child, parent) => parent.contains(child);
endsnippet

snippet 1lochasFocus "Check if an element is focused"
/* Check if an element is focused */
const hasFocus = (ele) => ele === document.activeElement;
endsnippet

snippet 1loctouchSupported "Check if the touch events are supported"
/* Check if the touch events are supported */
const touchSupported = () => 'ontouchstart' in window || (window.DocumentTouch && document instanceof window.DocumentTouch);
endsnippet

snippet 1locisAtBottom "Check if user scrolls to the bottom of the page"
/* Check if user scrolls to the bottom of the page */
const isAtBottom = () => document.documentElement.clientHeight + window.scrollY >= document.documentElement.scrollHeight;
endsnippet

snippet 1locisIE "Detect Internet Explorer browser"
/* Detect Internet Explorer browser */
const isIE = !!document.documentMode;
endsnippet

snippet 1locisMacBrowser "Detect macOS browser"
/* Detect macOS browser */
const isMacBrowser = /Mac|iPod|iPhone|iPad/.test(navigator.platform);
endsnippet

snippet 1locsiblings "Get all siblings of an element"
/* Get all siblings of an element */
const siblings = (ele) => [].slice.call(ele.parentNode.children).filter((child) => child !== ele);
endsnippet

snippet 1locgetPosition "Get the position of an element relative to the document"
/* Get the position of an element relative to the document */
const getPosition = (ele) => ((r = ele.getBoundingClientRect()), { left: r.left + window.scrollX, top: r.top + window.scrollY });
endsnippet

snippet 1locgetSelectedText "Get the selected text"
/* Get the selected text */
const getSelectedText = () => window.getSelection().toString();
endsnippet

snippet 1locundefined "Go back to the previous page"
/* Go back to the previous page */
history.back();history.go(-1);
endsnippet

snippet 1lochide "Hide an element"
/* Hide an element */
const hide = (ele) => (ele.style.display = 'none')
// Similar 👇🏼,  const hide = (ele) => (ele.style.visibility = 'hidden'),  const hide = (ele) => (ele.hidden = true);
endsnippet

snippet 1locinsertAfter "Insert an element after other one"
/* Insert an element after other one */
const insertAfter = (ele, anotherEle) => anotherEle.parentNode.insertBefore(ele, anotherEle.nextSibling)
// Similar 👇🏼,  const insertAfter = (ele, anotherEle) => anotherEle.insertAdjacentElement('afterend', ele);
endsnippet

snippet 1locinsertBefore "Insert an element before other one"
/* Insert an element before other one */
const insertBefore = (ele, anotherEle) => anotherEle.parentNode.insertBefore(ele, anotherEle)
// Similar 👇🏼,  const insertBefore = (ele, anotherEle) => anotherEle.insertAdjacentElement('beforebegin', ele);
endsnippet

snippet 1locinsertHtmlAfter "Insert given HTML after an element"
/* Insert given HTML after an element */
const insertHtmlAfter = (html, ele) => ele.insertAdjacentHTML('afterend', html);
endsnippet

snippet 1locinsertHtmlBefore "Insert given HTML before an element"
/* Insert given HTML before an element */
const insertHtmlBefore = (html, ele) => ele.insertAdjacentHTML('beforebegin', html);
endsnippet

snippet 1locgoTo "Redirect to another page"
/* Redirect to another page */
const goTo = (url) => (location.href = url);
endsnippet

snippet 1locreload "Reload the current page"
/* Reload the current page */
const reload = () => location.reload()
// Similar 👇🏼,  const reload = () => (location.href = location.href);
endsnippet

snippet 1locreplace "Replace an element"
/* Replace an element */
const replace = (ele, newEle) => ele.parentNode.replaceChild(newEle, ele);
endsnippet

snippet 1locgoToTop "Scroll to top of the page"
/* Scroll to top of the page */
const goToTop = () => window.scrollTo(0, 0);
endsnippet

snippet 1locserialize "Serialize form data"
/* Serialize form data */
const serialize = (formEle) => Array.from(new FormData(formEle)).reduce((p, [k, v]) => Object.assign({}, p, { [k]: p[k] ? (Array.isArray(p[k]) ? p[k] : [p[k]]).concat(v) : v }), {});
endsnippet

snippet 1locshow "Show an element"
/* Show an element */
const show = (ele) => (ele.style.display = '');
endsnippet

snippet 1locstripHtml "Strip HTML from a given text"
/* Strip HTML from a given text */
const stripHtml = (html) => new DOMParser().parseFromString(html, 'text/html').body.textContent || '';
endsnippet

snippet 1loctoggle "Toggle an element"
/* Toggle an element */
const toggle = (ele) => (ele.style.display = ele.style.display === 'none' ? 'block' : 'none')
// Similar 👇🏼,  const toggle = (ele) => (ele.hidden = !ele.hidden);
endsnippet

snippet 1locboxHandler "Box handler"
/* Box handler */
const boxHandler = (x) => ({ next: (f) => boxHandler(f(x)), done: (f) => f(x) });
endsnippet

snippet 1locisFunction "Check if a value is a function"
/* Check if a value is a function */
const isFunction = (v) => ['[object Function]', '[object GeneratorFunction]', '[object AsyncFunction]', '[object Promise]'].includes(Object.prototype.toString.call(v));
endsnippet

snippet 1locisGeneratorFunction "Check if a value is a generator function"
/* Check if a value is a generator function */
const isGeneratorFunction = (v) => Object.prototype.toString.call(v) === '[object GeneratorFunction]';
endsnippet

snippet 1locisAsyncFunction "Check if a value is an async function"
/* Check if a value is an async function */
const isAsyncFunction = (v) => Object.prototype.toString.call(v) === '[object AsyncFunction]';
endsnippet

snippet 1locpipe "Compose functions from left to right"
/* Compose functions from left to right */
const pipe = (...fns) => (x) => fns.reduce((y, f) => f(y), x);
endsnippet

snippet 1loccompose "Compose functions"
/* Compose functions */
const compose = (...fns) => (x) => fns.reduceRight((y, f) => f(y), x);
endsnippet

snippet 1locunary "Create a function that accepts a single argument"
/* Create a function that accepts a single argument */
const unary = (fn) => (arg) => fn(arg);
endsnippet

snippet 1locnoop "Create an empty function"
/* Create an empty function */
const noop = () => {}
// Similar 👇🏼,  const noop = Function();
endsnippet

snippet 1loccurry "Curry a function"
/* Curry a function */
const curry = (fn, ...args) => (fn.length <= args.length ? fn(...args) : curry.bind(null, fn, ...args));
endsnippet

snippet 1locthunkfy "Delay the evaluation of a function"
/* Delay the evaluation of a function */
const thunkfy = (fn) => (...args) => () => fn(...args);
endsnippet

snippet 1loconce "Execute a function once"
/* Execute a function once */
const once = (fn) => ((ran = false) => () => ran ? fn : ((ran = !ran), (fn = fn())))();
endsnippet

snippet 1locflip "Flip the arguments of a function"
/* Flip the arguments of a function */
const flip = (fn) => (...args) => fn(...args.reverse())
// Similar 👇🏼,  const flip = (fn) => (b, a) => fn(a, b),  const flip = (fn) => (b) => (a) => fn(a)(b);
endsnippet

snippet 1locidentity "Identity function"
/* Identity function */
const identity = (x) => x;
endsnippet

snippet 1locxor "Logical xor operator"
/* Logical xor operator */
const xor = (a, b) => (a && !b) || (!a && b)
// Similar 👇🏼,  const xor = (a, b) => !(!a && !b) && !(a && b),  const xor = (a, b) => Boolean(!a ^ !b);
endsnippet

snippet 1locmemoize "Memoize a function"
/* Memoize a function */
const memoize = (fn) => ((cache = Object.create(null)) => (arg) => cache[arg] || (cache[arg] = fn(arg)))();
endsnippet

snippet 1locpartial "Partially apply a function"
/* Partially apply a function */
const partial = (fn, ...a) => (...b) => fn(...a, ...b);
endsnippet

snippet 1locuncurry "Uncurry a function"
/* Uncurry a function */
const uncurry = (fn, n = 1) => (...args) => ((acc) => (args) => args.reduce((x, y) => x(y), acc))(fn)(args.slice(0, n));
endsnippet

snippet 1locradiansAngle "Calculate the angle of a line defined by two points"
/* Calculate the angle of a line defined by two points */
const radiansAngle = (p1, p2) => Math.atan2(p2.y - p1.y, p2.x - p1.x)
// Similar 👇🏼,  const degreesAngle = (p1, p2) => (Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180) / Math.PI;
endsnippet

snippet 1locdistance "Calculate the distance between two points"
/* Calculate the distance between two points */
const distance = (p1, p2) => Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
endsnippet

snippet 1loclerp "Calculate the linear interpolation between two numbers"
/* Calculate the linear interpolation between two numbers */
const lerp = (a, b, amount) => (1 - amount) * a + amount * b;
endsnippet

snippet 1locmidpoint "Calculate the midpoint between two points"
/* Calculate the midpoint between two points */
const midpoint = (p1, p2) => [(p1.x + p2.x) / 2, (p1.y + p2.y) / 2];
endsnippet

snippet 1locisInside "Check if a point is inside a rectangle"
/* Check if a point is inside a rectangle */
const isInside = (point, rect) => point.x > rect.left && point.x < rect.right && point.y > rect.top && point.y < rect.bottom;
endsnippet

snippet 1loccontains "Check if a rectangle contains other one"
/* Check if a rectangle contains other one */
const contains = (a, b) => a.x1 <= b.x1 && a.y1 <= b.y1 && a.x2 >= b.x2 && a.y2 >= b.y2;
endsnippet

snippet 1locoverlaps "Check if a rectangle overlaps other one"
/* Check if a rectangle overlaps other one */
const overlaps = (a, b) => (a.x1 < b.x2 && b.x1 < a.x2) || (a.y1 < b.y2 && b.y1 < a.y2);
endsnippet

snippet 1locdegsToRads "Convert degrees to radians"
/* Convert degrees to radians */
const degsToRads = (deg) => (deg * Math.PI) / 180.0;
endsnippet

snippet 1locradsToDegs "Convert radians to degrees"
/* Convert radians to degrees */
const radsToDegs = (rad) => (rad * 180) / Math.PI;
endsnippet

snippet 1locnormalizeRatio "Normalize the ratio of a number in a range"
/* Normalize the ratio of a number in a range */
const normalizeRatio = (value, min, max) => (value - min) / (max - min);
endsnippet

snippet 1locroundNearest "Round a number to the nearest multiple of a given value"
/* Round a number to the nearest multiple of a given value */
const roundNearest = (value, nearest) => Math.round(value / nearest) * nearest;
endsnippet

snippet 1locisNode "Check if the code is running in NodeJS"
/* Check if the code is running in NodeJS */
const isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
endsnippet

snippet 1locisBrowser "Check if the code is running in the browser"
/* Check if the code is running in the browser */
const isBrowser = typeof window === 'object' && typeof document === 'object';
endsnippet

snippet 1locclearCookies "Clear all cookies"
/* Clear all cookies */
const clearCookies = () => document.cookie.split(';').forEach((c) => (document.cookie = c.replace(/^ +/, '').replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`)));
endsnippet

snippet 1loctoFullHexColor "Convert 3 digits color to 6 digits color"
/* Convert 3 digits color to 6 digits color */
const toFullHexColor = (color) => `#${(color.startsWith('#') ? color.slice(1) : color).split('').map((c) => `${c}${c}`).join('')}`;
endsnippet

snippet 1loccelsiusToFahrenheit "Convert Celsius to Fahrenheit"
/* Convert Celsius to Fahrenheit */
const celsiusToFahrenheit = (celsius) => (celsius * 9) / 5 + 32;
endsnippet

snippet 1loccookies "Convert cookie to object"
/* Convert cookie to object */
const cookies = document.cookie.split(';').map((item) => item.split('=')).reduce((acc, [k, v]) => (acc[k.trim().replace('"', '')] = v) && acc, {});
endsnippet

snippet 1locfahrenheitToCelsius "Convert Fahrenheit to Celsius"
/* Convert Fahrenheit to Celsius */
const fahrenheitToCelsius = (fahrenheit) => ((fahrenheit - 32) * 5) / 9;
endsnippet

snippet 1lochexToRgb "Convert hex to rgb"
/* Convert hex to rgb */
const hexToRgb = (hex) => hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, (_, r, g, b) => `#${r}${r}${g}${g}${b}${b}`).substring(1).match(/.{2}/g).map((x) => parseInt(x, 16));
endsnippet

snippet 1locrgbToHex "Convert rgb color to hex"
/* Convert rgb color to hex */
const rgbToHex = (red, green, blue) => `#${((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1)}`
// Similar 👇🏼,  const rgbToHex = (red, green, blue) => `#\${[red, green, blue].map((v) => v.toString(16).padStart(2, '0')).join('')\}`;
endsnippet

snippet 1locgetUrlParams "Convert URL parameters to object"
/* Convert URL parameters to object */
const getUrlParams = (query) => Array.from(new URLSearchParams(query)).reduce((p, [k, v]) => Object.assign({}, p, { [k]: p[k] ? (Array.isArray(p[k]) ? p[k] : [p[k]]).concat(v) : v }), {});
endsnippet

snippet 1locdecode "Decode a JWT token"
/* Decode a JWT token */
const decode = (token) => decodeURIComponent(atob(token.split('.')[1].replace('-', '+').replace('_', '/')).split('').map((c) => `%${('00' + c.charCodeAt(0).toString(16)).slice(-2)}`).join(''));
endsnippet

snippet 1locisDarkMode "Detect dark mode"
/* Detect dark mode */
const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
endsnippet

snippet 1loclinear "Easing functions"
/* Easing functions */
const linear = (t) => t
// Similar 👇🏼,  const easeInQuad = (t) => t * t,  const easeOutQuad = (t) => t * (2 - t),  const easeInOutQuad = (t) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t),  const easeInCubic = (t) => t * t * t,  const easeOutCubic = (t) => --t * t * t + 1,  const easeInOutCubic = (t) => (t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1),  const easeInQuart = (t) => t * t * t * t,  const easeOutQuart = (t) => 1 - --t * t * t * t,  const easeInOutQuart = (t) => (t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t),  const easeInQuint = (t) => t * t * t * t * t,  const easeOutQuint = (t) => 1 + --t * t * t * t * t,  const easeInOutQuint = (t) => (t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t),  const easeInSine = (t) => 1 + Math.sin((Math.PI / 2) * t - Math.PI / 2),  const easeOutSine = (t) => Math.sin((Math.PI / 2) * t),  const easeInOutSine = (t) => (1 + Math.sin(Math.PI * t - Math.PI / 2)) / 2,  const easeInElastic = (t) => (0.04 - 0.04 / t) * Math.sin(25 * t) + 1,  const easeOutElastic = (t) => ((0.04 * t) / --t) * Math.sin(25 * t),  const easeInOutElastic = (t) => ((t -= 0.5) < 0 ? (0.02 + 0.01 / t) * Math.sin(50 * t) : (0.02 - 0.01 / t) * Math.sin(50 * t) + 1);
endsnippet

snippet 1locthrowdice "Emulate a dice throw"
/* Emulate a dice throw */
const throwdice = () => ~~(Math.random() * 6) + 1;
endsnippet

snippet 1locencode "Encode a URL"
/* Encode a URL */
const encode = (url) => encodeURIComponent(url).replace(/!/g, '%21').replace(/~/g, '%7E').replace(/\*/g, '%2A').replace(/'/g, '%27').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/%20/g, '+');
endsnippet

snippet 1locuid "Generate an unique and increment id"
/* Generate an unique and increment id */
const uid = (() => ((id = 0), () => id++))();
endsnippet

snippet 1loccoalesce "Get the first defined and non null argument"
/* Get the first defined and non null argument */
const coalesce = (...args) => args.find((item) => item !== undefined && item !== null)
// Similar 👇🏼,  const coalesce = (...args) => args.find((item) => ![undefined, null].includes(item));
endsnippet

snippet 1loccookie "Get the value of a cookie"
/* Get the value of a cookie */
const cookie = (name) => `; ${document.cookie}`.split(`; ${name}=`).pop().split(';').shift();
endsnippet

snippet 1locgetParam "Get the value of a param from a URL"
/* Get the value of a param from a URL */
const getParam = (url, param) => new URLSearchParams(new URL(url).search).get(param);
endsnippet

snippet 1locgetTypeOf "Get type of a variable in string"
/* Get type of a variable in string */
const getTypeOf = (obj) => Object.prototype.toString.call(obj).match(/\[object (.*)\]/)[1];
endsnippet

snippet 1locredirectHttps "Redirect the page to HTTPS if it is in HTTP"
/* Redirect the page to HTTPS if it is in HTTP */
const redirectHttps = () => (location.protocol === 'https:' ? {} : location.replace(`https:const redirectHttps = () => (location.protocol === 'https:' ? {} : (location.protocol = 'https:'));
endsnippet

snippet 1locrun "Run Promises in sequence"
/* Run Promises in sequence */
const run = (promises) => promises.reduce((p, c) => p.then((rp) => c.then((rc) => [...rp, rc])), Promise.resolve([]));
endsnippet

snippet 1locb] "Swap two variables"
/* Swap two variables */
[a, b] = [b, a];a = [b, (b = a)][0];a = ((x) => x)(b, (b = a));a = b + ((b = a), 0);a = b * ((b = a), 1);
endsnippet

snippet 1locwait "Wait for an amount of time"
/* Wait for an amount of time */
const wait = async (milliseconds) => new Promise((resolve) => setTimeout(resolve, milliseconds));
endsnippet

snippet 1locaddOrdinal "Add an ordinal suffix to a number"
/* Add an ordinal suffix to a number */
const addOrdinal = (n) => `${n}${['st', 'nd', 'rd'][((((n + 90) % 100) - 10) % 10) - 1] || 'th'}`
// Similar 👇🏼,  const addOrdinal = (n) => `\${n\}\${[, 'st', 'nd', 'rd'][/1?.\$/.exec(n)] || 'th'\}`,  const addOrdinal = (n) => `\${n\}\${[, 'st', 'nd', 'rd'][(n % 100 >> 3) ^ 1 && n % 10] || 'th'\}`,  const addOrdinal = (n) => `\${n\}\${{ one: 'st', two: 'nd', few: 'rd', other: 'th' \}[new Intl.PluralRules('en', { type: 'ordinal' \}).select(n)]\}`;
endsnippet

snippet 1locfibo "Calculate Fibonacci numbers"
/* Calculate Fibonacci numbers */
const fibo = (n, memo = {}) => memo[n] || (n <= 2 ? 1 : (memo[n] = fibo(n - 1, memo) + fibo(n - 2, memo)));
endsnippet

snippet 1locaverage "Calculate the average of arguments"
/* Calculate the average of arguments */
const average = (...args) => args.reduce((a, b) => a + b) / args.length;
endsnippet

snippet 1locdivision "Calculate the division of arguments"
/* Calculate the division of arguments */
const division = (...args) => args.reduce((a, b) => a / b);
endsnippet

snippet 1locfactorial "Calculate the factorial of a number"
/* Calculate the factorial of a number */
const factorial = (n) => (n <= 1 ? 1 : n * factorial(n - 1));
endsnippet

snippet 1locmod "Calculate the mod of collection index"
/* Calculate the mod of collection index */
const mod = (a, b) => ((a % b) + b) % b;
endsnippet

snippet 1locremainder "Calculate the remainder of division of arguments"
/* Calculate the remainder of division of arguments */
const remainder = (...args) => args.reduce((a, b) => a % b);
endsnippet

snippet 1locsum "Calculate the sum of arguments"
/* Calculate the sum of arguments */
const sum = (...args) => args.reduce((a, b) => a + b);
endsnippet

snippet 1locclamp "Clamp a number between two values"
/* Clamp a number between two values */
const clamp = (val, min = 0, max = 1) => Math.max(min, Math.min(max, val));
endsnippet

snippet 1locgcd "Compute the greatest common divisor between two numbers"
/* Compute the greatest common divisor between two numbers */
const gcd = (a, b) => (b === 0 ? a : gcd(b, a % b));
endsnippet

snippet 1loctoChars "Convert a number to equivalent characters"
/* Convert a number to equivalent characters */
const toChars = (n) => `${n >= 26 ? toChars(Math.floor(n / 26) - 1) : ''}${'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[n % 26]}`;
endsnippet

snippet 1loctoNumber "Convert a string to number"
/* Convert a string to number */
const toNumber = (str) => +str;
endsnippet

snippet 1locdecToBi "Convert decimal to binary recursively"
/* Convert decimal to binary recursively */
const decToBi = (num) => (num === 0 ? 0 : (num % 2) + 10 * decToBi(~~(num / 2)));
endsnippet

snippet 1locdigitize "Get the arrays of digits from a number"
/* Get the arrays of digits from a number */
const digitize = (n) => `${n}`.split('').map((v) => parseInt(v, 10))
// Similar 👇🏼,  const digitize = (n) => [...`\${n\}`].map((v) => parseInt(v, 10));
endsnippet

snippet 1locmul "Multiply arguments"
/* Multiply arguments */
const mul = (...args) => args.reduce((a, b) => a * b);
endsnippet

snippet 1locprefixWithZeros "Prefix an integer with zeros"
/* Prefix an integer with zeros */
const prefixWithZeros = (n, length) => (n / Math.pow(10, length)).toFixed(length).substr(2)
// Similar 👇🏼,  const prefixWithZeros = (n, length) => `\${Array(length).join('0')\}\${n\}`.slice(-length),  const prefixWithZeros = (n, length) => String(n).padStart(length, '0');
endsnippet

snippet 1locround "Round a number to a given number of digits"
/* Round a number to a given number of digits */
const round = (n, decimals = 0) => Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`);
endsnippet

snippet 1locsubtract "Subtract arguments"
/* Subtract arguments */
const subtract = (...args) => args.reduce((a, b) => a - b);
endsnippet

snippet 1loctruncate "Truncate a number at decimal"
/* Truncate a number at decimal */
const truncate = (n) => ~~n;
endsnippet

snippet 1loctoFixed "Truncate a number to a given number of decimal places without rounding"
/* Truncate a number to a given number of decimal places without rounding */
const toFixed = (n, fixed) => `${n}`.match(new RegExp(`^-?\\d+(?:\.\\d{0,${fixed}})?`))[0]
// Similar 👇🏼,  const toFixed = (n, fixed) => ~~(Math.pow(10, fixed) * n) / Math.pow(10, fixed);
endsnippet

snippet 1locisEqual "Check if multiple objects are equal"
/* Check if multiple objects are equal */
const isEqual = (...objects) => objects.every((obj) => JSON.stringify(obj) === JSON.stringify(objects[0]));
endsnippet

snippet 1locmap "Create an empty map that does not have properties"
/* Create an empty map that does not have properties */
const map = Object.create(null);
endsnippet

snippet 1loctoObj "Create an object from the pairs of key and value"
/* Create an object from the pairs of key and value */
const toObj = (arr) => Object.fromEntries(arr)
// Similar 👇🏼,  const toObj = (arr) => arr.reduce((a, c) => ((a[c[0]] = c[1]), a), {\});
endsnippet

snippet 1locpluck "Extract values of a property from an array of objects"
/* Extract values of a property from an array of objects */
const pluck = (objs, property) => objs.map((obj) => obj[property]);
endsnippet

snippet 1locgetValue "Get the value at given path of an object"
/* Get the value at given path of an object */
const getValue = (path, obj) => path.split('.').reduce((acc, c) => acc && acc[c], obj);
endsnippet

snippet 1locrenameKeys "Immutably rename object keys"
/* Immutably rename object keys */
const renameKeys = (keysMap, obj) => Object.keys(obj).reduce((acc, key) => ({ ...acc, ...{ [keysMap[key] || key]: obj[key] } }), {});
endsnippet

snippet 1locinvert "Invert keys and values of an object"
/* Invert keys and values of an object */
const invert = (obj) => Object.keys(obj).reduce((res, k) => Object.assign(res, { [obj[k]]: k }), {})
// Similar 👇🏼,  const invert = (obj) => Object.fromEntries(Object.entries(obj).map(([k, v]) => [v, k]));
endsnippet

snippet 1locomit "Omit a subset of properties from an object"
/* Omit a subset of properties from an object */
const omit = (obj, keys) => Object.keys(obj).filter((k) => !keys.includes(k)).reduce((res, k) => Object.assign(res, { [k]: obj[k] }), {});
endsnippet

snippet 1locpick "Pick a subset of properties of an object"
/* Pick a subset of properties of an object */
const pick = (obj, keys) => Object.keys(obj).filter((k) => keys.includes(k)).reduce((res, k) => Object.assign(res, { [k]: obj[k] }), {});
endsnippet

snippet 1locremoveNullUndefined "Remove all null and undefined properties from an object"
/* Remove all null and undefined properties from an object */
const removeNullUndefined = (obj) => Object.entries(obj).reduce((a, [k, v]) => (v == null ? a : ((a[k] = v), a)), {})
// Similar 👇🏼,  const removeNullUndefined = (obj) => Object.entries(obj).filter(([_, v]) => v != null).reduce((acc, [k, v]) => ({ ...acc, [k]: v \}), {\}),  const removeNullUndefined = (obj) => Object.fromEntries(Object.entries(obj).filter(([_, v]) => v != null));
endsnippet

snippet 1locshallowCopy "Shallow copy an object"
/* Shallow copy an object */
const shallowCopy = obj => Object.assign({}, obj)
// Similar 👇🏼,  const shallowCopy = obj => {...obj\};
endsnippet

snippet 1locsort "Sort an object by its properties"
/* Sort an object by its properties */
const sort = (obj) => Object.keys(obj).sort().reduce((p, c) => ((p[c] = obj[c]), p), {});
endsnippet

snippet 1locrandomBoolean "Generate a random boolean"
/* Generate a random boolean */
const randomBoolean = () => Math.random() >= 0.5;
endsnippet

snippet 1locrandomFloat "Generate a random floating point number in given range"
/* Generate a random floating point number in given range */
const randomFloat = (min, max) => Math.random() * (max - min) + min;
endsnippet

snippet 1locrandomColor "Generate a random hex color"
/* Generate a random hex color */
const randomColor = () => `#${Math.random().toString(16).slice(2, 8).padEnd(6, '0')}`
// Similar 👇🏼,  const randomColor = () => `#\${(~~(Math.random() * (1 << 24))).toString(16)\}`;
endsnippet

snippet 1locrandomInteger "Generate a random integer in given range"
/* Generate a random integer in given range */
const randomInteger = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
endsnippet

snippet 1locrandomIp "Generate a random IP address"
/* Generate a random IP address */
const randomIp = () => Array(4).fill(0).map((_, i) => Math.floor(Math.random() * 255) + (i === 0 ? 1 : 0)).join('.');
endsnippet

snippet 1locrandomSign "Generate a random sign"
/* Generate a random sign */
const randomSign = () => (Math.random() >= 0.5 ? 1 : -1);
endsnippet

snippet 1locgenerateString "Generate a random string from given characters"
/* Generate a random string from given characters */
const generateString = (length, chars) => Array(length).fill('').map((v) => chars[Math.floor(Math.random() * chars.length)]).join('');
endsnippet

snippet 1locrandomStr "Generate a random string using Node crypto module"
/* Generate a random string using Node crypto module */
const randomStr = () => require('crypto').randomBytes(32).toString('hex');
endsnippet

snippet 1locgenerateString "Generate a random string with given length"
/* Generate a random string with given length */
const generateString = (length) => Array(length).fill('').map((v) => Math.random().toString(36).charAt(2)).join('');
endsnippet

snippet 1locuuid "Generate a random UUID"
/* Generate a random UUID */
const uuid = (a) => (a ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid));
endsnippet

snippet 1locrandomArrayInRange "Generate an array of random integers in a given range"
/* Generate an array of random integers in a given range */
const randomArrayInRange = (min, max, n) => Array.from({ length: n }, () => Math.floor(Math.random() * (max - min + 1)) + min);
endsnippet

snippet 1locrandomItem "Get a random item and remove it from an array"
/* Get a random item and remove it from an array */
const randomItem = (arr) => arr.splice((Math.random() * arr.length) | 0, 1);
endsnippet

snippet 1locrandomItem "Get a random item from an array"
/* Get a random item from an array */
const randomItem = (arr) => arr[(Math.random() * arr.length) | 0];
endsnippet

snippet 1locrandomItems "Get random items of an array"
/* Get random items of an array */
const randomItems = (arr, count) => arr.concat().reduce((p, _, __, arr) => (p[0] < count ? [p[0] + 1, p[1].concat(arr.splice((Math.random() * arr.length) | 0, 1))] : p), [0, []])[1];
endsnippet

snippet 1locrandomProp "Pick a random property of an object"
/* Pick a random property of an object */
const randomProp = (obj) => Object.keys(obj)[(Math.random() * Object.keys(obj).length) | 0];
endsnippet

snippet 1locrandomLines "Pick random lines from a text document"
/* Pick random lines from a text document */
const randomLines = (str, count) => str.split(/\r?\n/).reduce((p, _, __, arr) => (p[0] < count ? [p[0] + 1, p[1].concat(arr.splice((Math.random() * arr.length) | 0, 1))] : p), [0, []])[1];
endsnippet

snippet 1loccapitalize "Capitalize a string"
/* Capitalize a string */
const capitalize = (str) => `${str.charAt(0).toUpperCase()}${str.slice(1)}`
// Similar 👇🏼,  const capitalize = ([first, ...rest]) => `\${first.toUpperCase()\}\${rest.join('')\}`;
endsnippet

snippet 1locisRelative "Check if a path is relative"
/* Check if a path is relative */
const isRelative = (path) => !/^([a-z]+:)?[\\/]/i.test(path);
endsnippet

snippet 1locconsistsRepeatedSubstring "Check if a string consists of a repeated character sequence"
/* Check if a string consists of a repeated character sequence */
const consistsRepeatedSubstring = (str) => `${str}${str}`.indexOf(str, 1) !== str.length;
endsnippet

snippet 1locisPalindrome "Check if a string is a palindrome"
/* Check if a string is a palindrome */
const isPalindrome = (str) => str === str.split('').reverse().join('');
endsnippet

snippet 1locisAbsoluteUrl "Check if a URL is absolute"
/* Check if a URL is absolute */
const isAbsoluteUrl = (url) => /^[a-z][a-z0-9+.-]*:/.test(url);
endsnippet

snippet 1locareAnagram "Check if two strings are anagram"
/* Check if two strings are anagram */
const areAnagram = (str1, str2) => str1.toLowerCase().split('').sort().join('') === str2.toLowerCase().split('').sort().join('');
endsnippet

snippet 1locbase64ToUint8 "Convert a base64 encoded string to an uint8 array"
/* Convert a base64 encoded string to an uint8 array */
const base64ToUint8 = (str) => Uint8Array.from(atob(str), (c) => c.charCodeAt(0));
endsnippet

snippet 1locletterToEmoji "Convert a letter to associate emoji"
/* Convert a letter to associate emoji */
const letterToEmoji = (c) => String.fromCodePoint(c.toLowerCase().charCodeAt(0) + 127365);
endsnippet

snippet 1loctoCamelCase "Convert a string to camelCase"
/* Convert a string to camelCase */
const toCamelCase = (str) => str.trim().replace(/[-_\s]+(.)?/g, (_, c) => (c ? c.toUpperCase() : ''));
endsnippet

snippet 1loctoPascalCase "Convert a string to PascalCase"
/* Convert a string to PascalCase */
const toPascalCase = (str) => (str.match(/[a-zA-Z0-9]+/g) || []).map((w) => `${w.charAt(0).toUpperCase()}${w.slice(1)}`).join('');
endsnippet

snippet 1locslugify "Convert a string to URL slug"
/* Convert a string to URL slug */
const slugify = (str) => str.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '');
endsnippet

snippet 1loctoUnixPath "Convert a Windows file path to Unix path"
/* Convert a Windows file path to Unix path */
const toUnixPath = (path) => path.replace(/[\\/]+/g, '/').replace(/^([a-zA-Z]+:|\.\/)/, '');
endsnippet

snippet 1locuint8ToBase64 "Convert an uint8 array to a base64 encoded string"
/* Convert an uint8 array to a base64 encoded string */
const uint8ToBase64 = (arr) => btoa(Array(arr.length).fill('').map((_, i) => String.fromCharCode(arr[i])).join(''))
// Similar 👇🏼,  const uint8ToBase64 = (arr) => Buffer.from(arr).toString('base64');
endsnippet

snippet 1lockebabToCamel "Convert camelCase to kebab-case and vice versa"
/* Convert camelCase to kebab-case and vice versa */
const kebabToCamel = (str) => str.replace(/-./g, (m) => m.toUpperCase()[1])
// Similar 👇🏼,  const camelToKebab = (str) => str.replace(/([a-z0-9])([A-Z])/g, '\$1-\$2').toLowerCase();
endsnippet

snippet 1locsnakeToCamel "Convert snake_case to camelCase"
/* Convert snake_case to camelCase */
const snakeToCamel = (str) => str.toLowerCase().replace(/(_\w)/g, (m) => m.toUpperCase().substr(1));
endsnippet

snippet 1locgetIndex "Convert the name of an Excel column to number"
/* Convert the name of an Excel column to number */
const getIndex = (col) => col.split('').reduce((prev, next) => prev * 26 + parseInt(next, 36) - 9, 0);
endsnippet

snippet 1loccountWords "Count the number of words in a string"
/* Count the number of words in a string */
const countWords = (str) => str.trim().split(/\s+/).length;
endsnippet

snippet 1loccountOccurrences "Count the occurrences of a character in a string"
/* Count the occurrences of a character in a string */
const countOccurrences = (str, char) => [...str].reduce((a, v) => (v === char ? a + 1 : a), 0)
// Similar 👇🏼,  const countOccurrences = (str, char) => str.split('').reduce((a, v) => (v === char ? a + 1 : a), 0),  const countOccurrences = (str, char) => [...str].filter((item) => item === char).length,  const countOccurrences = (str, char) => str.split('').filter((item) => item === char).length;
endsnippet

snippet 1locdecapitalize "Decapitalize a string"
/* Decapitalize a string */
const decapitalize = (str) => `${str.charAt(0).toLowerCase()}${str.slice(1)}`
// Similar 👇🏼,  const decapitalize = ([first, ...rest]) => `\${first.toLowerCase()\}\${rest.join('')\}`;
endsnippet

snippet 1locescape "Escape HTML special characters"
/* Escape HTML special characters */
const escape = (str) => str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#39;').replace(/"/g, '&quot;')
// Similar 👇🏼,  const escape = (str) => str.replace(/[&<>"']/g, (m) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' \}[m]));
endsnippet

snippet 1locformat "Format a string"
/* Format a string */
const format = (str, ...vals) => vals.reduce((s, v, i) => s.replace(new RegExp('\\{' + i + '\\}', 'g'), v), str);
endsnippet

snippet 1lochash "Generate a hash of a string"
/* Generate a hash of a string */
const hash = (str) => str.split('').reduce((prev, curr) => (Math.imul(31, prev) + curr.charCodeAt(0)) | 0, 0)
// Similar 👇🏼,  const hash = (str) => str.split('').reduce((prev, curr) => ((prev << 5) - prev + curr.charCodeAt(0)) | 0, 0);
endsnippet

snippet 1locbaseUrl "Get the base URL without any parameters"
/* Get the base URL without any parameters */
const baseUrl = (url) => (url.indexOf('?') === -1 ? url : url.slice(0, url.indexOf('?')))
// Similar 👇🏼,  const baseUrl = (url) => (url.includes('?') ? url.slice(0, url.indexOf('?')) : url),  const baseUrl = (url) => url.split('?')[0];
endsnippet

snippet 1locext "Get the file extension from a file name"
/* Get the file extension from a file name */
const ext = (fileName) => fileName.split('.').pop();
endsnippet

snippet 1locfileName "Get the file name from a URL"
/* Get the file name from a URL */
const fileName = (url: string): string => url.substring(url.lastIndexOf('/') + 1);
endsnippet

snippet 1locbytes "Get the length of a string in bytes"
/* Get the length of a string in bytes */
const bytes = (str) => new Blob([str]).size;
endsnippet

snippet 1loccharacterCount "Get the number of a character in a string"
/* Get the number of a character in a string */
const characterCount = (str, char) => str.split(char).length - 1
// Similar 👇🏼,  const characterCount = (str, char) => str.replace(new RegExp(String.raw`[^\${char\}]`, 'g'), '').length;
endsnippet

snippet 1loclowercaseFirst "Make the first character of a string lowercase"
/* Make the first character of a string lowercase */
const lowercaseFirst = (str) => `${str.charAt(0).toLowerCase()}${str.slice(1)}`;
endsnippet

snippet 1locnormalizePath "Normalize file path slashes"
/* Normalize file path slashes */
const normalizePath = (path) => path.replace(/[\\/]+/g, '/');
endsnippet

snippet 1locprependNumbers "Prepend a line number to each line of a text document"
/* Prepend a line number to each line of a text document */
const prependNumbers = (str) => str.split(/\r?\n/).map((line, i) => `${(i + 1).toString().padStart(2, ' ')} ${line}`).join('\n');
endsnippet

snippet 1locremoveDuplicateLines "Remove duplicate lines of a text document"
/* Remove duplicate lines of a text document */
const removeDuplicateLines = (str) => Array.from(new Set(str.split(/\r?\n/))).join('\n');
endsnippet

snippet 1locremoveEmptyLines "Remove empty lines of a text document"
/* Remove empty lines of a text document */
const removeEmptyLines = (str) => str.split(/\r?\n/).filter((line) => line.trim() !== '').join('\n');
endsnippet

snippet 1locremoveSpaces "Remove spaces from a string"
/* Remove spaces from a string */
const removeSpaces = (str) => str.replace(/\s/g, '');
endsnippet

snippet 1locrepeat "Repeat a string"
/* Repeat a string */
const repeat = (str, numberOfTimes) => str.repeat(numberOfTimes)
// Similar 👇🏼,  const repeat = (str, numberOfTimes) => Array(numberOfTimes + 1).join(str);
endsnippet

snippet 1locnl2br "Replace all line breaks with br elements"
/* Replace all line breaks with br elements */
const nl2br = (str) => str.replace(new RegExp('\r?\n', 'g'), '<br>');str.split('\n').map((item, index) => (<React.Fragment key={index}> {item} <br /> </React.Fragment>));
endsnippet

snippet 1locreplace "Replace all tab characters with spaces"
/* Replace all tab characters with spaces */
const replace = (str, numSpaces = 4) => str.replaceAll('\t', ' '.repeat(numSpaces));
endsnippet

snippet 1locreplaceSpaces "Replace multiple spaces with a single space"
/* Replace multiple spaces with a single space */
const replaceSpaces = (str) => str.replace(/\s\s+/g, ' ')
// Similar 👇🏼,  const replaceOnlySpaces = (str) => str.replace(/ +/g, ' ');
endsnippet

snippet 1locmask "Replace the first given number of characters of a string with another character"
/* Replace the first given number of characters of a string with another character */
const mask = (str, num, mask) => `${str}`.slice(num).padStart(`${str}`.length, mask);
endsnippet

snippet 1locreverse "Reverse a string"
/* Reverse a string */
const reverse = (str) => str.split('').reverse().join('')
// Similar 👇🏼,  const reverse = (str) => [...str].reverse().join(''),  const reverse = (str) => str.split('').reduce((rev, char) => `\${char\}\${rev\}`, ''),  const reverse = (str) => (str === '' ? '' : `\${reverse(str.substr(1))\}\${str.charAt(0)\}`);
endsnippet

snippet 1locreverseLines "Reverse the order of lines of a text"
/* Reverse the order of lines of a text */
const reverseLines = (str) => str.split(/\r?\n/).reverse().join('\n');
endsnippet

snippet 1locsortLines "Sort lines of a text document in the alphabetical order"
/* Sort lines of a text document in the alphabetical order */
const sortLines = (str) => str.split(/\r?\n/).sort().join('\n')
// Similar 👇🏼,  const reverseSortedLines = (str) => str.split(/\r?\n/).sort().reverse().join('\n');
endsnippet

snippet 1locsort "Sort the characters of a string in the alphabetical order"
/* Sort the characters of a string in the alphabetical order */
const sort = (str) => str.split('').sort((a, b) => a.localeCompare(b)).join('');
endsnippet

snippet 1locstripAnsiCodes "Strip ANSI codes from a string"
/* Strip ANSI codes from a string */
const stripAnsiCodes = (str) => str.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
endsnippet

snippet 1locswapCase "Swap case of characters in a string"
/* Swap case of characters in a string */
const swapCase = (str) => str.split('').map((c) => (c === c.toLowerCase() ? c.toUpperCase() : c.toLowerCase())).join('');
endsnippet

snippet 1loctrimSlashes "Trim slashes at the beginning and the end of a string"
/* Trim slashes at the beginning and the end of a string */
const trimSlashes = (str) => str.replace(/^\/+|\/+$/g, '')
// Similar 👇🏼,  const trimSlashes = (str) => str.split('/').filter(Boolean).join('/');
endsnippet

snippet 1loctrim "Trim some character"
/* Trim some character */
const trim = (str, char) => str.split(char).filter(Boolean).join();
endsnippet

snippet 1loctrimExt "Trim the file extension from a file name"
/* Trim the file extension from a file name */
const trimExt = (fileName) => (fileName.indexOf('.') === -1 ? fileName : fileName.split('.').slice(0, -1).join('.'));
endsnippet

snippet 1loctruncate "Truncate a string at full words"
/* Truncate a string at full words */
const truncate = (str, max, suffix) => (str.length < max ? str : `${str.substr(0, str.substr(0, max - suffix.length).lastIndexOf(' '))}${suffix}`);
endsnippet

snippet 1locunescape "Unescape HTML special characters"
/* Unescape HTML special characters */
const unescape = (str) => str.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#0*39;/g, "'").replace(/&quot;/g, '"');
endsnippet

snippet 1locuppercaseWords "Uppercase the first character of each word in a string"
/* Uppercase the first character of each word in a string */
const uppercaseWords = (str) => str.split(' ').map((w) => `${w.charAt(0).toUpperCase()}${w.slice(1)}`).join(' ')
// Similar 👇🏼,  const uppercaseWords = (str) => str.replace(/^(.)|\s+(.)/g, (c) => c.toUpperCase());
endsnippet

snippet 1locisDigit "Check if a character is a digit"
/* Check if a character is a digit */
const isDigit = (char) => char < 10
// Similar 👇🏼,  const isDigit = (char) => char.length === 1 && c >= '0' && c <= '9',  const isDigit = (char) => Boolean([true, true, true, true, true, true, true, true, true, true][char]);
endsnippet

snippet 1locisWeekday "Check if a date is a weekday"
/* Check if a date is a weekday */
const isWeekday = (date = new Date()) => date.getDay() % 6 !== 0;
endsnippet

snippet 1locisWeekend "Check if a date is a weekend"
/* Check if a date is a weekend */
const isWeekend = (date = new Date()) => date.getDay() % 6 === 0;
endsnippet

snippet 1locisBetween "Check if a date is between two dates"
/* Check if a date is between two dates */
const isBetween = (date, min, max) => date.getTime() >= min.getTime() && date.getTime() <= max.getTime();
endsnippet

snippet 1locisToday "Check if a date is today"
/* Check if a date is today */
const isToday = (date) => date.toISOString().slice(0, 10) === new Date().toISOString().slice(0, 10);
endsnippet

snippet 1locisCurrentYear "Check if a date occurs in the current year"
/* Check if a date occurs in the current year */
const isCurrentYear = (date) => date.getUTCFullYear() === new Date().getUTCFullYear();
endsnippet

snippet 1lochasDuplicateValues "Check if a flat array has duplicate values"
/* Check if a flat array has duplicate values */
const hasDuplicateValues = (arr) => new Set(arr).size !== arr.length;
endsnippet

snippet 1locisPrime "Check if a given integer is a prime number"
/* Check if a given integer is a prime number */
const isPrime = (n) => n > 1 && Array(Math.floor(Math.sqrt(n)) - 1).fill(0).map((_, i) => i + 2).every((i) => n % i !== 0);
endsnippet

snippet 1locisPowerOfTwo "Check if a number is a power of 2"
/* Check if a number is a power of 2 */
const isPowerOfTwo = (n) => (n & (n - 1)) === 0;
endsnippet

snippet 1locisEven "Check if a number is even"
/* Check if a number is even */
const isEven = (n) => n % 2 === 0
// Similar 👇🏼,  const isEven = (n) => (n & 1) === 0,  const isEven = (n) => !(n & 1),  const isEven = (n) => Number.isInteger(n / 2);
endsnippet

snippet 1locinRange "Check if a number is in a given range"
/* Check if a number is in a given range */
const inRange = (num, a, b, threshold = 0) => Math.min(a, b) - threshold <= num && num <= Math.max(a, b) + threshold;
endsnippet

snippet 1locisNegative "Check if a number is negative"
/* Check if a number is negative */
const isNegative = (n) => Math.sign(n) === -1
// Similar 👇🏼,  const isNegative = (n) => n < 0;
endsnippet

snippet 1locisOdd "Check if a number is odd"
/* Check if a number is odd */
const isOdd = (n) => n % 2 !== 0
// Similar 👇🏼,  const isOdd = (n) => !!(n & 1),  const isOdd = (n) => !Number.isInteger(n / 2);
endsnippet

snippet 1locisPositive "Check if a number is positive"
/* Check if a number is positive */
const isPositive = (n) => Math.sign(n) === 1;
endsnippet

snippet 1loccontainsLowerCase "Check if a string contains lower case characters"
/* Check if a string contains lower case characters */
const containsLowerCase = (str) => str !== str.toUpperCase();
endsnippet

snippet 1locisAscii "Check if a string contains only ASCII characters"
/* Check if a string contains only ASCII characters */
const isAscii = (str) => /^[\x00-\x7F]+$/.test(str);
endsnippet

snippet 1locisNumeric "Check if a string contains only digits"
/* Check if a string contains only digits */
const isNumeric = (str) => !/[^0-9]/.test(str);
endsnippet

snippet 1locisAlphanumeric "Check if a string contains only letters and numbers"
/* Check if a string contains only letters and numbers */
const isAlphanumeric = (str) => /^[0-9A-Z]+$/i.test(str);
endsnippet

snippet 1locisAlpha "Check if a string contains only letters"
/* Check if a string contains only letters */
const isAlpha = (str) => /^[A-Z]+$/i.test(str);
endsnippet

snippet 1loccontainsUpperCase "Check if a string contains upper case characters"
/* Check if a string contains upper case characters */
const containsUpperCase = (str) => str !== str.toLowerCase();
endsnippet

snippet 1loccontainsWhitespace "Check if a string contains whitespace"
/* Check if a string contains whitespace */
const containsWhitespace = (str) => (str) => /\s/.test(str);
endsnippet

snippet 1locisHexColor "Check if a string is a hexadecimal color"
/* Check if a string is a hexadecimal color */
const isHexColor = (color) => /^#([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i.test(color);
endsnippet

snippet 1locisHexadecimal "Check if a string is a hexadecimal number"
/* Check if a string is a hexadecimal number */
const isHexadecimal = (str) => /^[A-F0-9]+$/i.test(str)
// Similar 👇🏼,  const isHexadecimal = (str) => str.split('').every((c) => '0123456789ABCDEFabcdef'.indexOf(c) !== -1);
endsnippet

snippet 1locisMongoId "Check if a string is a MongoDB ObjectId"
/* Check if a string is a MongoDB ObjectId */
const isMongoId = (str) => str.length === 24 && /^[A-F0-9]+$/i.test(str)
// Similar 👇🏼,  const isMongoId = (str) => str.length === 24 && str.split('').every((c) => '0123456789ABCDEFabcdef'.indexOf(c) !== -1);
endsnippet

snippet 1locisOctal "Check if a string is an octal number"
/* Check if a string is an octal number */
const isOctal = (str) => /^(0o)?[0-7]+$/i.test(str);
endsnippet

snippet 1locisLowerCase "Check if a string is lower case"
/* Check if a string is lower case */
const isLowerCase = (str) => str === str.toLowerCase();
endsnippet

snippet 1locisUpperCase "Check if a string is upper case"
/* Check if a string is upper case */
const isUpperCase = (str) => str === str.toUpperCase();
endsnippet

snippet 1locisBIC "Check if a value is a business identifier code"
/* Check if a value is a business identifier code */
const isBIC = (value) => /^[a-zA-Z]{6}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?$/.test(value);
endsnippet

snippet 1locisNumber "Check if a value is a number"
/* Check if a value is a number */
const isNumber = (value) => !isNaN(parseFloat(value)) && isFinite(value);
endsnippet

snippet 1locisPlainObject "Check if a value is a plain object"
/* Check if a value is a plain object */
const isPlainObject = (v) => !!v && typeof v === 'object' && (v.__proto__ === null || v.__proto__ === Object.prototype);
endsnippet

snippet 1locisRegExp "Check if a value is a regular expression"
/* Check if a value is a regular expression */
const isRegExp = (value) => Object.prototype.toString.call(value) === '[object RegExp]';
endsnippet

snippet 1locisString "Check if a value is a string"
/* Check if a value is a string */
const isString = (value) => Object.prototype.toString.call(value) === '[object String]';
endsnippet

snippet 1locisObject "Check if a value is an object"
/* Check if a value is an object */
const isObject = (v) => v !== null && typeof v === 'object';
endsnippet

snippet 1locisBase32 "Check if a value is base32 encoded"
/* Check if a value is base32 encoded */
const isBase32 = (value) => value.length % 8 === 0 && /^[A-Z2-7]+=*$/.test(value);
endsnippet

snippet 1locisBase58 "Check if a value is base58 encoded"
/* Check if a value is base58 encoded */
const isBase58 = (value) => /^[A-HJ-NP-Za-km-z1-9]*$/.test(value);
endsnippet

snippet 1locisBase64 "Check if a value is base64 encoded"
/* Check if a value is base64 encoded */
const isBase64 = (value) => /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/.test(value);
endsnippet

snippet 1locisNil "Check if a value is nil"
/* Check if a value is nil */
const isNil = (value) => value == null;
endsnippet

snippet 1locisLeapYear "Check if a year is leap year"
/* Check if a year is leap year */
const isLeapYear = (year) => (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0
// Similar 👇🏼,  const isLeapYear = (year) => new Date(year, 1, 29).getDate() === 29;
endsnippet

snippet 1locisEqual "Check if all array elements are equal to a given value"
/* Check if all array elements are equal to a given value */
const isEqual = (arr, value) => arr.every((item) => item === value)
// Similar 👇🏼,  const isEqual = (arr, value) => !arr.some((item) => item !== value);
endsnippet

snippet 1locareEqual "Check if all items in an array are equal"
/* Check if all items in an array are equal */
const areEqual = (arr) => arr.length > 0 && arr.every((item) => item === arr[0])
// Similar 👇🏼,  const areEqual = (arr) => new Set(arr).size === 1;
endsnippet

snippet 1loccontains "Check if an array contains a value matching some criterias"
/* Check if an array contains a value matching some criterias */
const contains = (arr, criteria) => arr.some((v) => criteria(v))
// Similar 👇🏼,  const contains = (arr, criteria) => arr.some(criteria),  const contains = (arr, criteria) => arr.filter(criteria).length > 0;
endsnippet

snippet 1locisNotEmpty "Check if an array is not empty"
/* Check if an array is not empty */
const isNotEmpty = (arr) => Array.isArray(arr) && Object.keys(arr).length > 0;
endsnippet

snippet 1locisSubset "Check if an array is subset of other array"
/* Check if an array is subset of other array */
const isSubset = (a, b) => new Set(b).size === new Set(b.concat(a)).size
// Similar 👇🏼,  const isSubset = (a, b) => b.join('|').includes(a.join('|'));
endsnippet

snippet 1locisPromise "Check if an object is a Promise"
/* Check if an object is a Promise */
const isPromise = (obj) => !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
endsnippet

snippet 1locisArray "Check if an object is an array"
/* Check if an object is an array */
const isArray = (obj) => Array.isArray(obj);
endsnippet

snippet 1locisEmpty "Check if an object is empty"
/* Check if an object is empty */
const isEmpty = (obj) => Reflect.ownKeys(obj).length === 0 && obj.constructor === Object
// Similar 👇🏼,  const isEmpty = (obj) => JSON.stringify(obj) === '{\}';
endsnippet

snippet 1locisValidDate "Validate a Gregorian date"
/* Validate a Gregorian date */
const isValidDate = (m, d, y) => 0 <= m && m <= 11 && 0 < y && y < 32768 && 0 < d && d <= new Date(y, m, 0).getDate();
endsnippet