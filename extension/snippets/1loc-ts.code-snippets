{"Cast a value as an array":{"prefix":["1loccastArray","1locArray"],"body":["${1:/**\n * Cast a value as an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/cast-a-value-as-an-array.md","*/","}const castArray = <T,_>(value: T | T[]): T[] => (Array.isArray(value) ? value : [value]);;"],"description":"Cast a value as an array"},"Check if an array is empty":{"prefix":["1locisEmpty","1locArray"],"body":["${1:/**\n * Check if an array is empty"," * https://github.com/1milligram/1loc/blob/master/snippets/array/check-if-an-array-is-empty.md","*/","}const isEmpty = <T,_>(arr: T[]): boolean => !Array.isArray(arr) || arr.length === 0;;"],"description":"Check if an array is empty"},"Clone an array":{"prefix":["1locclone","1locArray"],"body":["${1:/**\n * Clone an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/clone-an-array.md","\n  // Similar üëáüèº","  const clone = <T,_>(arr: T[]): T[] => [...arr]","  const clone = <T,_>(arr: T[]): T[] => Array.from(arr)","  const clone = <T,_>(arr: T[]): T[] => arr.map((x) => x)","  const clone = <T,_>(arr: T[]): T[] => JSON.parse(JSON.stringify(arr))","  const clone = <T,_>(arr: T[]): T[] => arr.concat([]);","*/","}const clone = <T,_>(arr: T[]): T[] => arr.slice(0);"],"description":"Clone an array"},"Compare two arrays regardless of order":{"prefix":["1locisEqual","1locArray"],"body":["${1:/**\n * Compare two arrays regardless of order"," * https://github.com/1milligram/1loc/blob/master/snippets/array/compare-two-arrays-regardless-of-order.md","*/","}const isEqual = <T,_>(a: T[], b: T[]): boolean => JSON.stringify(a.sort()) === JSON.stringify(b.sort());;"],"description":"Compare two arrays regardless of order"},"Compare two arrays":{"prefix":["1locisEqual","1locArray"],"body":["${1:/**\n * Compare two arrays"," * https://github.com/1milligram/1loc/blob/master/snippets/array/compare-two-arrays.md","\n  // Similar üëáüèº","  const isEqual = <T,_>(a: T[], b: T[]): boolean => a.length === b.length && a.every((v, i) => v === b[i]);","*/","}const isEqual = <T,_>(a: T[], b: T[]): boolean => JSON.stringify(a) === JSON.stringify(b);"],"description":"Compare two arrays"},"Convert an array of objects to a single object":{"prefix":["1loctoObject","1locArray"],"body":["${1:/**\n * Convert an array of objects to a single object"," * https://github.com/1milligram/1loc/blob/master/snippets/array/convert-an-array-of-objects-to-a-single-object.md","\n  // Similar üëáüèº","  const toObject = <T extends Record<string, any>, K extends keyof T>(arr: T[], key: K): Record<string, T> => (Object.fromEntries(arr.map((it) => [it[key], it])));","*/","}const toObject = <T extends Record<string, any>, K extends keyof T>(arr: T[], key: K): Record<string, T> => (arr.reduce((a, b) => ({ ...a, [b[key]]: b }), {}));"],"description":"Convert an array of objects to a single object"},"Convert an array of strings to numbers":{"prefix":["1loctoNumbers","1locArray"],"body":["${1:/**\n * Convert an array of strings to numbers"," * https://github.com/1milligram/1loc/blob/master/snippets/array/convert-an-array-of-strings-to-numbers.md","\n  // Similar üëáüèº","  const toNumbers = (arr: string[]): number[] => arr.map((x) => +x);","*/","}const toNumbers = (arr: string[]): number[] => arr.map(Number);"],"description":"Convert an array of strings to numbers"},"Count by the properties of an array of objects":{"prefix":["1loccountBy","1locArray"],"body":["${1:/**\n * Count by the properties of an array of objects"," * https://github.com/1milligram/1loc/blob/master/snippets/array/count-by-the-properties-of-an-array-of-objects.md","*/","}const countBy = <T extends Record<string, string>, K extends keyof T>(arr: T[], prop: K): Record<string, number> => (arr.reduce((prev, curr) => ((prev[curr[prop]] = ++prev[curr[prop]] || 1), prev), {} as Record<string, number>));;"],"description":"Count by the properties of an array of objects"},"Count the occurrences of a value in an array":{"prefix":["1loccountOccurrences","1locArray"],"body":["${1:/**\n * Count the occurrences of a value in an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/count-the-occurrences-of-a-value-in-an-array.md","\n  // Similar üëáüèº","  const countOccurrences = <T,_>(arr: T[], val: T): number => arr.filter((item) => item === val).length;","*/","}const countOccurrences = <T,_>(arr: T[], val: T): number => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);"],"description":"Count the occurrences of a value in an array"},"Count the occurrences of array elements":{"prefix":["1loccountOccurrences","1locArray"],"body":["${1:/**\n * Count the occurrences of array elements"," * https://github.com/1milligram/1loc/blob/master/snippets/array/count-the-occurrences-of-array-elements.md","*/","}const countOccurrences = <T extends string | number,>(arr: T[]): Record<T, number> => (arr.reduce((prev, curr) => ((prev[curr] = ++prev[curr] || 1), prev), {}as Record<T, number>));;"],"description":"Count the occurrences of array elements"},"Create an array of cumulative sum":{"prefix":["1locaccumulate","1locArray"],"body":["${1:/**\n * Create an array of cumulative sum"," * https://github.com/1milligram/1loc/blob/master/snippets/array/create-an-array-of-cumulative-sum.md","\n  // Similar üëáüèº","  const accumulate = (arr: number[]): number[] => arr.reduce((a, b, i) => (i === 0 ? [b] : [...a, b + a[i - 1]]), [0]);","*/","}const accumulate = (arr: number[]): number[] => arr.map(((sum) => (value: number) => (sum += value))(0));"],"description":"Create an array of cumulative sum"},"Create an array of numbers in the given range":{"prefix":["1locrange","1locArray"],"body":["${1:/**\n * Create an array of numbers in the given range"," * https://github.com/1milligram/1loc/blob/master/snippets/array/create-an-array-of-numbers-in-the-given-range.md","\n  // Similar üëáüèº","  const range = (min: number, max: number): number[] => Array(max - min + 1).fill(0).map((_, i) => min + i)","  const range = (min: number, max: number): number[] => Array.from({ length: max - min + 1 }, (_, i) => min + i);","*/","}const range = (min: number, max: number): number[] => [...Array(max - min + 1).keys()].map((i) => i + min);"],"description":"Create an array of numbers in the given range"},"Create cartesian product":{"prefix":["1loccartesian","1locArray"],"body":["${1:/**\n * Create cartesian product"," * https://github.com/1milligram/1loc/blob/master/snippets/array/create-cartesian-product.md","*/","}const cartesian = (...sets) => sets.reduce((acc, set) => acc.flatMap((x) => set.map((y) => [...x, y])), [[]]);;"],"description":"Create cartesian product"},"Empty an array":{"prefix":["1locempty","1locArray"],"body":["${1:/**\n * Empty an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/empty-an-array.md","*/","}const empty = <T,_>(arr: T[]) => (arr.length = 0);arr = [];;"],"description":"Empty an array"},"Find the closest number from an array":{"prefix":["1locclosest","1locArray"],"body":["${1:/**\n * Find the closest number from an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/find-the-closest-number-from-an-array.md","\n  // Similar üëáüèº","  const closest = (arr: number[], n: number): number => arr.sort((a, b) => Math.abs(a - n) - Math.abs(b - n))[0];","*/","}const closest = (arr: number[], n: number): number => arr.reduce((prev, curr) => (Math.abs(curr - n) < Math.abs(prev - n) ? curr : prev));"],"description":"Find the closest number from an array"},"Find the index of the last matching item of an array":{"prefix":["1loclastIndex","1locArray"],"body":["${1:/**\n * Find the index of the last matching item of an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/find-the-index-of-the-last-matching-item-of-an-array.md","\n  // Similar üëáüèº","  const lastIndex = <T,_>(arr: T[], predicate: (a: T) => boolean): number => arr.map((item) => predicate(item)).lastIndexOf(true);","*/","}const lastIndex = <T,_>(arr: T[], predicate: (a: T) => boolean): number => arr.reduce((prev, curr, index) => (predicate(curr) ? index : prev), -1);"],"description":"Find the index of the last matching item of an array"},"Find the index of the maximum item of an array":{"prefix":["1locindexOfMax","1locArray"],"body":["${1:/**\n * Find the index of the maximum item of an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/find-the-index-of-the-maximum-item-of-an-array.md","*/","}const indexOfMax = (arr: number[]): number => arr.reduce((prev, curr, i, a) => (curr > a[prev] ? i : prev), 0);;"],"description":"Find the index of the maximum item of an array"},"Find the index of the minimum item of an array":{"prefix":["1locindexOfMin","1locArray"],"body":["${1:/**\n * Find the index of the minimum item of an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/find-the-index-of-the-minimum-item-of-an-array.md","*/","}const indexOfMin = (arr: number[]): number => arr.reduce((prev, curr, i, a) => (curr < a[prev] ? i : prev), 0);;"],"description":"Find the index of the minimum item of an array"},"Find the length of the longest string in an array":{"prefix":["1locfindLongest","1locArray"],"body":["${1:/**\n * Find the length of the longest string in an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/find-the-length-of-the-longest-string-in-an-array.md","*/","}const findLongest = (words: string[]): number => Math.max(...words.map((el) => el.length));;"],"description":"Find the length of the longest string in an array"},"Find the maximum item of an array by given key":{"prefix":["1locmaxBy","1locArray"],"body":["${1:/**\n * Find the maximum item of an array by given key"," * https://github.com/1milligram/1loc/blob/master/snippets/array/find-the-maximum-item-of-an-array-by-given-key.md","*/","}const maxBy = <T extends Record<string, any>, K extends keyof T>(arr: T[], key: K): T => (arr.reduce((a, b) => (a[key] >= b[key] ? a : b), {} as T));;"],"description":"Find the maximum item of an array by given key"},"Find the maximum item of an array":{"prefix":["1locmax","1locArray"],"body":["${1:/**\n * Find the maximum item of an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/find-the-maximum-item-of-an-array.md","*/","}const max = (arr: number[]): number => Math.max(...arr);;"],"description":"Find the maximum item of an array"},"Find the minimum item of an array by given key":{"prefix":["1locminBy","1locArray"],"body":["${1:/**\n * Find the minimum item of an array by given key"," * https://github.com/1milligram/1loc/blob/master/snippets/array/find-the-minimum-item-of-an-array-by-given-key.md","*/","}const minBy = <T extends Record<string, any>, K extends keyof T>(arr: T[], key: K): T => (arr.reduce((a, b) => (a[key] < b[key] ? a : b), {} as T));;"],"description":"Find the minimum item of an array by given key"},"Find the minimum item of an array":{"prefix":["1locmin","1locArray"],"body":["${1:/**\n * Find the minimum item of an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/find-the-minimum-item-of-an-array.md","*/","}const min = (arr: number[]): number => Math.min(...arr);;"],"description":"Find the minimum item of an array"},"Flatten an array":{"prefix":["1locflat","1locArray"],"body":["${1:/**\n * Flatten an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/flatten-an-array.md","\n  // Similar üëáüèº","  const flat = (arr) => arr.reduce((a, b) => (Array.isArray(b) ? [...a, ...flat(b)] : [...a, b]), [])","  const flat = (arr) => arr.flat();","*/","}const flat = (arr) => [].concat.apply([], arr.map((a) => (Array.isArray(a) ? flat(a) : a)));"],"description":"Flatten an array"},"Generate an array of alphabet characters":{"prefix":["1localphabet:","1locArray"],"body":["${1:/**\n * Generate an array of alphabet characters"," * https://github.com/1milligram/1loc/blob/master/snippets/array/generate-an-array-of-alphabet-characters.md","\n  // Similar üëáüèº","  const alphabet: string[] = [...'abcdefghijklmnopqrstuvwxyz']","  const alphabet: string[] = Array(26).fill(0).map((_, i) => String.fromCharCode(i + 97))","  const alphabet: string[] = [...Array(26).keys()].map((i) => String.fromCharCode(i + 97))","  const alphabet: string[] = [...Array(26)].map((_, i) => (i + 10).toString(36))","  const alphabet: string[] = String.fromCharCode(...' '.repeat(26).split('').map((_, i) => i + 97)).split('');","*/","}const alphabet: string[] = 'abcdefghijklmnopqrstuvwxyz'.split('');"],"description":"Generate an array of alphabet characters"},"Get all arrays of consecutive elements":{"prefix":["1locgetConsecutiveArrays","1locArray"],"body":["${1:/**\n * Get all arrays of consecutive elements"," * https://github.com/1milligram/1loc/blob/master/snippets/array/get-all-arrays-of-consecutive-elements.md","*/","}const getConsecutiveArrays = <T,_>(arr: T[], size: number): T[][] => (size > arr.length ? [] : arr.slice(size - 1).map((_, i) => arr.slice(i, size + i)));;"],"description":"Get all arrays of consecutive elements"},"Get all n-th items of an array":{"prefix":["1locgetNthItems","1locArray"],"body":["${1:/**\n * Get all n-th items of an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/get-all-nth-items-of-an-array.md","*/","}const getNthItems = <T,_>(arr: T[], nth: number): T[] => arr.filter((_, i) => i % nth === nth - 1);;"],"description":"Get all n-th items of an array"},"Get all subsets of an array":{"prefix":["1locgetSubsets","1locArray"],"body":["${1:/**\n * Get all subsets of an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/get-all-subsets-of-an-array.md","*/","}const getSubsets = <T,>(arr: T[]): T[][] => (arr.reduce((prev, curr) => prev.concat(prev.map((k) => k.concat(curr))), [[]] as T[][]));;"],"description":"Get all subsets of an array"},"Get indices of a value in an array":{"prefix":["1locindices","1locArray"],"body":["${1:/**\n * Get indices of a value in an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/get-indices-of-a-value-in-an-array.md","\n  // Similar üëáüèº","  const indices = <T,>(arr: T[], value: T): number[] => (arr.map((v, i) => (v === value ? i : false)).filter(Boolean) as number[]);","*/","}const indices = <T,>(arr: T[], value: T): number[] => (arr.reduce((acc, v, i) => (v === value ? [...acc, i] : acc), [] as number[]));"],"description":"Get indices of a value in an array"},"Get the average of an array":{"prefix":["1locaverage","1locArray"],"body":["${1:/**\n * Get the average of an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/get-the-average-of-an-array.md","*/","}const average = (arr: number[]): number => arr.reduce((a, b) => a + b, 0) / arr.length;;"],"description":"Get the average of an array"},"Get the intersection of arrays":{"prefix":["1locgetIntersection","1locArray"],"body":["${1:/**\n * Get the intersection of arrays"," * https://github.com/1milligram/1loc/blob/master/snippets/array/get-the-intersection-of-arrays.md","*/","}const getIntersection = <T,_>(a: T[], ...arr: T[][]): T[] => [...new Set(a)].filter((v) => arr.every((b) => b.includes(v)));;"],"description":"Get the intersection of arrays"},"Get the rank of an array of numbers":{"prefix":["1locranking","1locArray"],"body":["${1:/**\n * Get the rank of an array of numbers"," * https://github.com/1milligram/1loc/blob/master/snippets/array/get-the-rank-of-an-array-of-numbers.md","*/","}const ranking = (arr: number[]): number[] => arr.map((x, y, z) => z.filter((w) => w > x).length + 1);;"],"description":"Get the rank of an array of numbers"},"Get the sum of an array of numbers":{"prefix":["1locsum","1locArray"],"body":["${1:/**\n * Get the sum of an array of numbers"," * https://github.com/1milligram/1loc/blob/master/snippets/array/get-the-sum-of-an-array-of-numbers.md","*/","}const sum = (arr: number[]): number => arr.reduce((a, b) => a + b, 0);;"],"description":"Get the sum of an array of numbers"},"Get the unique values of an array":{"prefix":["1locunique","1locArray"],"body":["${1:/**\n * Get the unique values of an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/get-the-unique-values-of-an-array.md","\n  // Similar üëáüèº","  const unique = <T,>(arr: T[]): T[] => arr.filter((el, i, array) => array.indexOf(el) === i)","  const unique = <T,>(arr: T[]): T[] => arr.reduce((acc, el) => (acc.includes(el) ? acc : [...acc, el]), [] as T[]);","*/","}const unique = <T,>(arr: T[]): T[] => [...new Set(arr)];"],"description":"Get the unique values of an array"},"Get union of arrays":{"prefix":["1locunion","1locArray"],"body":["${1:/**\n * Get union of arrays"," * https://github.com/1milligram/1loc/blob/master/snippets/array/get-union-of-arrays.md","*/","}const union = <T,_>(...arr: T[][]): T[] => [...new Set(arr.flat())];;"],"description":"Get union of arrays"},"Group an array of objects by a key":{"prefix":["1locgroupBy","1locArray"],"body":["${1:/**\n * Group an array of objects by a key"," * https://github.com/1milligram/1loc/blob/master/snippets/array/group-an-array-of-objects-by-a-key.md","*/","}const groupBy = <T extends Record<string, any>, K extends keyof T>(arr: T[], key: K): Record<string, T[]> => (arr.reduce((acc, item) => ((acc[item[key]] = [...(acc[item[key]] || []), item]), acc), {} as Record<string, T[]>));;"],"description":"Group an array of objects by a key"},"Merge two arrays":{"prefix":["1locmerge","1locArray"],"body":["${1:/**\n * Merge two arrays"," * https://github.com/1milligram/1loc/blob/master/snippets/array/merge-two-arrays.md","\n  // Similar üëáüèº","  const merge = <T,_>(a: T[], b: T[]): T[] => [...a, ...b]","  const merge = <T,_>(a: T[], b: T[]): T[] => [...new Set(a.concat(b))]","  const merge = <T,_>(a: T[], b: T[]): T[] => [...new Set([...a, ...b])];","*/","}const merge = <T,_>(a: T[], b: T[]): T[] => a.concat(b);"],"description":"Merge two arrays"},"Partition an array based on a condition":{"prefix":["1locpartition","1locArray"],"body":["${1:/**\n * Partition an array based on a condition"," * https://github.com/1milligram/1loc/blob/master/snippets/array/partition-an-array-based-on-a-condition.md","*/","}const partition = <T,_>(arr: T[], criteria: (a: T) => boolean): T[][] => arr.reduce((acc, i) => (acc[criteria(i) ? 0 : 1].push(i), acc), [[], []]);;"],"description":"Partition an array based on a condition"},"Remove duplicate values in an array":{"prefix":["1locremoveDuplicate","1locArray"],"body":["${1:/**\n * Remove duplicate values in an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/remove-duplicate-values-in-an-array.md","*/","}const removeDuplicate = <T,_>(arr: T[]): T[] => arr.filter((i) => arr.indexOf(i) === arr.lastIndexOf(i));;"],"description":"Remove duplicate values in an array"},"Remove falsy values from array":{"prefix":["1locremoveFalsy","1locArray"],"body":["${1:/**\n * Remove falsy values from array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/remove-falsy-values-from-array.md","*/","}const removeFalsy = <T,_>(arr: T[]): T[] => arr.filter(Boolean);;"],"description":"Remove falsy values from array"},"Repeat an array":{"prefix":["1locrepeat","1locArray"],"body":["${1:/**\n * Repeat an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/repeat-an-array.md","\n  // Similar üëáüèº","  const repeat = <T,_>(arr: T[], n: number): T[] => Array(n).fill(arr).flat()","  const repeat = <T,_>(arr: T[], n: number): T[] => Array(arr.length * n).fill(0).map((_, i) => arr[i % arr.length])","  const repeat = <T,_>(arr: T[], n: number): T[] => Array.from({ length: arr.length * n }, (_, i) => arr[i % arr.length]);","*/","}const repeat = <T,_>(arr: T[], n: number): T[] => [].concat(...Array(n).fill(arr));"],"description":"Repeat an array"},"Shuffle an array":{"prefix":["1locshuffle","1locArray"],"body":["${1:/**\n * Shuffle an array"," * https://github.com/1milligram/1loc/blob/master/snippets/array/shuffle-an-array.md","\n  // Similar üëáüèº","  const shuffle = <T,_>(arr: T[]): T[] => arr.sort(() => 0.5 - Math.random());","*/","}const shuffle = <T,_>(arr: T[]): T[] => arr.map((a) => ({ sort: Math.random(), value: a })).sort((a, b) => a.sort - b.sort).map((a) => a.value);"],"description":"Shuffle an array"},"Sort an array of items by given key":{"prefix":["1locsortBy","1locArray"],"body":["${1:/**\n * Sort an array of items by given key"," * https://github.com/1milligram/1loc/blob/master/snippets/array/sort-an-array-of-items-by-given-key.md","*/","}const sortBy = <T extends Record<string, any>, K extends keyof T>(arr: T[], k: K): T[] => (arr.concat().sort((a, b) => (a[k] > b[k] ? 1 : a[k] < b[k] ? -1 : 0)));;"],"description":"Sort an array of items by given key"},"Sort an array of numbers":{"prefix":["1locsort","1locArray"],"body":["${1:/**\n * Sort an array of numbers"," * https://github.com/1milligram/1loc/blob/master/snippets/array/sort-an-array-of-numbers.md","*/","}const sort = (arr: number[]): number[] => arr.sort((a, b) => a - b);;"],"description":"Sort an array of numbers"},"Split an array into chunks":{"prefix":["1locchunk","1locArray"],"body":["${1:/**\n * Split an array into chunks"," * https://github.com/1milligram/1loc/blob/master/snippets/array/split-an-array-into-chunks.md","*/","}const chunk = <T,>(arr: T[], size: number): T[][] => (arr.reduce((acc, e, i) => (i % size ? acc[acc.length - 1].push(e) : acc.push([e]), acc), [] as T[][]));;"],"description":"Split an array into chunks"},"Swap the rows and columns of a matrix":{"prefix":["1loctranspose","1locArray"],"body":["${1:/**\n * Swap the rows and columns of a matrix"," * https://github.com/1milligram/1loc/blob/master/snippets/array/swap-the-rows-and-columns-of-a-matrix.md","\n  // Similar üëáüèº","  const transpose = <T,>(matrix: T[][]): T[][] => matrix[0].map((col, c) => matrix.map((row, r) => matrix[r][c]))","  const transpose = <T,>(matrix: T[][]): T[][] => (matrix.reduce((prev, next) => next.map((item, i) => (prev[i] || []).concat(next[i])), [] as T[][]));","*/","}const transpose = <T,>(matrix: T[][]): T[][] => matrix[0].map((col, i) => matrix.map((row) => row[i]));"],"description":"Swap the rows and columns of a matrix"},"Swap two array items":{"prefix":["1locswapItems","1locArray"],"body":["${1:/**\n * Swap two array items"," * https://github.com/1milligram/1loc/blob/master/snippets/array/swap-two-array-items.md","*/","}const swapItems = <T,_>(a: T[], i: number, j: number): T[] => (a[i] && a[j] && [...a.slice(0, i), a[j], ...a.slice(i + 1, j), a[i], ...a.slice(j + 1)]) || a;;"],"description":"Swap two array items"},"Unzip an array of arrays":{"prefix":["1locunzip","1locArray"],"body":["${1:/**\n * Unzip an array of arrays"," * https://github.com/1milligram/1loc/blob/master/snippets/array/unzip-an-array-of-arrays.md","*/","}const unzip = (arr) => arr.reduce((acc, c) => (c.forEach((v, i) => acc[i].push(v)), acc), Array.from({ length: Math.max(...arr.map((a) => a.length)) }, (_) => []));;"],"description":"Unzip an array of arrays"},"Zip multiple arrays":{"prefix":["1loczip","1locArray"],"body":["${1:/**\n * Zip multiple arrays"," * https://github.com/1milligram/1loc/blob/master/snippets/array/zip-multiple-arrays.md","*/","}const zip = (...arr) => Array.from({ length: Math.max(...arr.map((a) => a.length)) }, (_, i) => arr.map((a) => a[i]));;"],"description":"Zip multiple arrays"},"Add AM PM suffix to an hour":{"prefix":["1locsuffixAmPm","1locDateTime"],"body":["${1:/**\n * Add AM PM suffix to an hour"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/add-am-pm-suffix-to-an-hour.md","*/","}const suffixAmPm = (h: number): string => `${h % 12 === 0 ? 12 : h % 12}${h < 12 ? 'am' : 'pm'}`;;"],"description":"Add AM PM suffix to an hour"},"Calculate the number of difference days between two dates":{"prefix":["1locdiffDays","1locDateTime"],"body":["${1:/**\n * Calculate the number of difference days between two dates"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/calculate-the-number-of-difference-days-between-two-dates.md","*/","}const diffDays = (date: Date, otherDate: Date): number => Math.ceil(Math.abs(date.valueOf() - otherDate.valueOf()) / (1000 * 60 * 60 * 24));;"],"description":"Calculate the number of difference days between two dates"},"Calculate the number of months between two dates":{"prefix":["1locmonthDiff","1locDateTime"],"body":["${1:/**\n * Calculate the number of months between two dates"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/calculate-the-number-of-months-between-two-dates.md","*/","}const monthDiff = (startDate: Date, endDate: Date): number => Math.max(0, (endDate.getFullYear() - startDate.getFullYear()) * 12 - startDate.getMonth() + endDate.getMonth());;"],"description":"Calculate the number of months between two dates"},"Compare two dates":{"prefix":["1loccompare","1locDateTime"],"body":["${1:/**\n * Compare two dates"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/compare-two-dates.md","*/","}const compare = (a: Date, b: Date): boolean => a.getTime() > b.getTime();;"],"description":"Compare two dates"},"Convert a date to YYYY-MM-DD format":{"prefix":["1locformatYmd","1locDateTime"],"body":["${1:/**\n * Convert a date to YYYY-MM-DD format"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/convert-a-date-to-yyyy-mm-dd-format.md","*/","}const formatYmd = (date: Date): string => date.toISOString().slice(0, 10);;"],"description":"Convert a date to YYYY-MM-DD format"},"Convert seconds to hh:mm:ss format":{"prefix":["1locformatSeconds","1locDateTime"],"body":["${1:/**\n * Convert seconds to hh:mm:ss format"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/convert-seconds-to-hh-mm-ss-format.md","\n  // Similar üëáüèº","  const formatSeconds = (s: number): string => (new Date(s * 1000).toUTCString().match(/(\\d\\d:\\d\\d:\\d\\d)/) as string[])[0]","  const formatSeconds = (s: number): string => ([parseInt(`\\${s / 3600}`), parseInt(`\\${(s / 60) % 60}`), parseInt(`\\${s % 60}`)].join(':').replace(/\\b(\\d)\\b/g, '0\\$1'));","*/","}const formatSeconds = (s: number): string => new Date(s * 1000).toISOString().substr(11, 8);"],"description":"Convert seconds to hh:mm:ss format"},"Extract year, month, day, hour, minute, second and millisecond from a date":{"prefix":["1locextract","1locDateTime"],"body":["${1:/**\n * Extract year, month, day, hour, minute, second and millisecond from a date"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/extract-year-month-day-hour-minute-second-and-millisecond-from-a-date.md","*/","}const extract = (date: Date): string[] => date.toISOString().split(/[^0-9]/).slice(0, -1);;"],"description":"Extract year, month, day, hour, minute, second and millisecond from a date"},"Format a date for the given locale":{"prefix":["1locformat","1locDateTime"],"body":["${1:/**\n * Format a date for the given locale"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/format-a-date-for-the-given-locale.md","*/","}const format = (date: Date, locale: string): string => new Intl.DateTimeFormat(locale).format(date);;"],"description":"Format a date for the given locale"},"Get the current quarter of a date":{"prefix":["1locgetQuarter","1locDateTime"],"body":["${1:/**\n * Get the current quarter of a date"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/get-the-current-quarter-of-a-date.md","*/","}const getQuarter = (d = new Date()): number => Math.ceil((d.getMonth() + 1) / 3);;"],"description":"Get the current quarter of a date"},"Get the current timestamp in seconds":{"prefix":["1locts","1locDateTime"],"body":["${1:/**\n * Get the current timestamp in seconds"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/get-the-current-timestamp-in-seconds.md","*/","}const ts = (): number => Math.floor(new Date().getTime() / 1000);;"],"description":"Get the current timestamp in seconds"},"Get the day of the year from a date":{"prefix":["1locdayOfYear","1locDateTime"],"body":["${1:/**\n * Get the day of the year from a date"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/get-the-day-of-the-year-from-a-date.md","*/","}const dayOfYear = (date: Date): number => Math.floor((date.valueOf() - new Date(date.getFullYear(), 0, 0).valueOf()) / (1000 * 60 * 60 * 24));;"],"description":"Get the day of the year from a date"},"Get the first date in the month of a date":{"prefix":["1locgetFirstDate","1locDateTime"],"body":["${1:/**\n * Get the first date in the month of a date"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/get-the-first-date-in-the-month-of-a-date.md","*/","}const getFirstDate = (d = new Date()): Date => new Date(d.getFullYear(), d.getMonth(), 1);;"],"description":"Get the first date in the month of a date"},"Get the last date in the month of a date":{"prefix":["1locgetLastDate","1locDateTime"],"body":["${1:/**\n * Get the last date in the month of a date"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/get-the-last-date-in-the-month-of-a-date.md","*/","}const getLastDate = (d = new Date()): Date => new Date(d.getFullYear(), d.getMonth() + 1, 0);;"],"description":"Get the last date in the month of a date"},"Get the month name of a date":{"prefix":["1locgetMonthName","1locDateTime"],"body":["${1:/**\n * Get the month name of a date"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/get-the-month-name-of-a-date.md","*/","}const getMonthName = (date: Date): string => ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', ' November', 'December'][date.getMonth()];;"],"description":"Get the month name of a date"},"Get the number of days in given month":{"prefix":["1locdaysInMonth","1locDateTime"],"body":["${1:/**\n * Get the number of days in given month"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/get-the-number-of-days-in-given-month.md","*/","}const daysInMonth = (month: number, year: number): number => new Date(year, month, 0).getDate();;"],"description":"Get the number of days in given month"},"Get the timezone string":{"prefix":["1locgetTimezone","1locDateTime"],"body":["${1:/**\n * Get the timezone string"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/get-the-timezone-string.md","*/","}const getTimezone = (): string => Intl.DateTimeFormat().resolvedOptions().timeZone;;"],"description":"Get the timezone string"},"Get the tomorrow date":{"prefix":["1loctomorrow:","1locDateTime"],"body":["${1:/**\n * Get the tomorrow date"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/get-the-tomorrow-date.md","\n  // Similar üëáüèº","  const tomorrow: Date = new Date(new Date().valueOf() + 1000 * 60 * 60 * 24);","*/","}const tomorrow: Date = ((d) => new Date(d.setDate(d.getDate() + 1)))(new Date());"],"description":"Get the tomorrow date"},"Get the total number of days in a year":{"prefix":["1locnumberOfDays","1locDateTime"],"body":["${1:/**\n * Get the total number of days in a year"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/get-the-total-number-of-days-in-a-year.md","\n  // Similar üëáüèº","  const numberOfDays = (year: number): number => (new Date(year, 1, 29).getDate() === 29 ? 366 : 365);","*/","}const numberOfDays = (year: number): number => ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0 ? 366 : 365);"],"description":"Get the total number of days in a year"},"Get the weekday of a date":{"prefix":["1locgetWeekday","1locDateTime"],"body":["${1:/**\n * Get the weekday of a date"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/get-the-weekday-of-a-date.md","*/","}const getWeekday = (date: Date): string => ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][date.getDay()];;"],"description":"Get the weekday of a date"},"Get the yesterday date":{"prefix":["1locyesterday:","1locDateTime"],"body":["${1:/**\n * Get the yesterday date"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/get-the-yesterday-date.md","\n  // Similar üëáüèº","  const yesterday: Date = new Date(new Date().valueOf() - 1000 * 60 * 60 * 24);","*/","}const yesterday: Date = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());"],"description":"Get the yesterday date"},"Initialize the current date but set time to midnight":{"prefix":["1locmidnightOfToday","1locDateTime"],"body":["${1:/**\n * Initialize the current date but set time to midnight"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/initialize-the-current-date-but-set-time-to-midnight.md","*/","}const midnightOfToday = (): Date => new Date(new Date().setHours(0, 0, 0, 0));;"],"description":"Initialize the current date but set time to midnight"},"Sort an array of dates":{"prefix":["1locsortDescending","1locDateTime"],"body":["${1:/**\n * Sort an array of dates"," * https://github.com/1milligram/1loc/blob/master/snippets/date-time/sort-an-array-of-dates.md","\n  // Similar üëáüèº","  const sortAscending = (arr: Date[]): Date[] => arr.sort((a, b) => b.getTime() - a.getTime());","*/","}const sortDescending = (arr: Date[]): Date[] => arr.sort((a, b) => a.getTime() - b.getTime());"],"description":"Sort an array of dates"},"Check if an element is a descendant of another":{"prefix":["1locisDescendant","1locDOM"],"body":["${1:/**\n * Check if an element is a descendant of another"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/check-if-an-element-is-a-descendant-of-another.md","*/","}const isDescendant = (child: Node, parent: Node): boolean => parent.contains(child);;"],"description":"Check if an element is a descendant of another"},"Check if an element is focused":{"prefix":["1lochasFocus","1locDOM"],"body":["${1:/**\n * Check if an element is focused"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/check-if-an-element-is-focused.md","*/","}const hasFocus = (ele: Node): boolean => ele === document.activeElement;;"],"description":"Check if an element is focused"},"Check if the touch events are supported":{"prefix":["1loctouchSupported","1locDOM"],"body":["${1:/**\n * Check if the touch events are supported"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/check-if-the-touch-events-are-supported.md","*/","}const touchSupported = (): boolean => ('ontouchstart' in window || (window as any)['DocumentTouch'] && document instanceof (window as any)['DocumentTouch']);;"],"description":"Check if the touch events are supported"},"Check if user scrolls to the bottom of the page":{"prefix":["1locisAtBottom","1locDOM"],"body":["${1:/**\n * Check if user scrolls to the bottom of the page"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/check-if-user-scrolls-to-the-bottom-of-the-page.md","*/","}const isAtBottom = (): boolean => document.documentElement.clientHeight + window.scrollY >= document.documentElement.scrollHeight;;"],"description":"Check if user scrolls to the bottom of the page"},"Detect Internet Explorer browser":{"prefix":["1locisIE","1locDOM"],"body":["${1:/**\n * Detect Internet Explorer browser"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/detect-internet-explorer-browser.md","*/","}const isIE = !!(document as any).documentMode;;"],"description":"Detect Internet Explorer browser"},"Detect macOS browser":{"prefix":["1locisMacBrowser:","1locDOM"],"body":["${1:/**\n * Detect macOS browser"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/detect-macos-browser.md","*/","}const isMacBrowser: boolean = /Mac|iPod|iPhone|iPad/.test(navigator.platform);;"],"description":"Detect macOS browser"},"Get all siblings of an element":{"prefix":["1locsiblings","1locDOM"],"body":["${1:/**\n * Get all siblings of an element"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/get-all-siblings-of-an-element.md","*/","}const siblings = (ele: Node): Node[] => (ele.parentNode ? [].slice.call(ele.parentNode.children).filter((child) => child !== ele) : []);;"],"description":"Get all siblings of an element"},"Get the position of an element relative to the document":{"prefix":["1locgetPosition","1locDOM"],"body":["${1:/**\n * Get the position of an element relative to the document"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/get-the-position-of-an-element-relative-to-the-document.md","*/","}const getPosition = (ele) => ((r = ele.getBoundingClientRect()), { left: r.left + window.scrollX, top: r.top + window.scrollY });;"],"description":"Get the position of an element relative to the document"},"Get the selected text":{"prefix":["1locgetSelectedText","1locDOM"],"body":["${1:/**\n * Get the selected text"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/get-the-selected-text.md","*/","}const getSelectedText = () => window.getSelection().toString();;"],"description":"Get the selected text"},"Go back to the previous page":{"prefix":["1locundefined","1locDOM"],"body":["${1:/**\n * Go back to the previous page"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/go-back-to-the-previous-page.md","*/","}history.back();history.go(-1);;"],"description":"Go back to the previous page"},"Hide an element":{"prefix":["1lochide","1locDOM"],"body":["${1:/**\n * Hide an element"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/hide-an-element.md","\n  // Similar üëáüèº","  const hide = (ele: HTMLElement): string => (ele.style.visibility = 'hidden')","  const hide = (ele: HTMLElement): boolean => (ele.hidden = true);","*/","}const hide = (ele: HTMLElement): string => (ele.style.display = 'none');"],"description":"Hide an element"},"Insert an element after other one":{"prefix":["1locinsertAfter","1locDOM"],"body":["${1:/**\n * Insert an element after other one"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/insert-an-element-after-other-one.md","\n  // Similar üëáüèº","  const insertAfter = (ele: Element, anotherEle: Element): Element | null => anotherEle.insertAdjacentElement('afterend', ele);","*/","}const insertAfter = (ele: Element, anotherEle: Element): Element | null => (anotherEle.parentNode ? anotherEle.parentNode.insertBefore(ele, anotherEle.nextSibling) : null);"],"description":"Insert an element after other one"},"Insert an element before other one":{"prefix":["1locinsertBefore","1locDOM"],"body":["${1:/**\n * Insert an element before other one"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/insert-an-element-before-other-one.md","\n  // Similar üëáüèº","  const insertBefore = (ele: Element, anotherEle: Element) => anotherEle.insertAdjacentElement('beforebegin', ele);","*/","}const insertBefore = (ele: Element, anotherEle: Element): Element | null => (anotherEle.parentNode ? anotherEle.parentNode.insertBefore(ele, anotherEle) : null);"],"description":"Insert an element before other one"},"Insert given HTML after an element":{"prefix":["1locinsertHtmlAfter","1locDOM"],"body":["${1:/**\n * Insert given HTML after an element"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/insert-given-html-after-an-element.md","*/","}const insertHtmlAfter = (html: string, ele: Element): void => ele.insertAdjacentHTML('afterend', html);;"],"description":"Insert given HTML after an element"},"Insert given HTML before an element":{"prefix":["1locinsertHtmlBefore","1locDOM"],"body":["${1:/**\n * Insert given HTML before an element"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/insert-given-html-before-an-element.md","*/","}const insertHtmlBefore = (html: string, ele: Element): void => ele.insertAdjacentHTML('beforebegin', html);;"],"description":"Insert given HTML before an element"},"Redirect to another page":{"prefix":["1locgoTo","1locDOM"],"body":["${1:/**\n * Redirect to another page"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/redirect-to-another-page.md","*/","}const goTo = (url: string): string => (location.href = url);;"],"description":"Redirect to another page"},"Reload the current page":{"prefix":["1locreload","1locDOM"],"body":["${1:/**\n * Reload the current page"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/reload-the-current-page.md","\n  // Similar üëáüèº","  const reload = (): string => (location.href = location.href);","*/","}const reload = (): void => location.reload();"],"description":"Reload the current page"},"Replace an element":{"prefix":["1locreplace","1locDOM"],"body":["${1:/**\n * Replace an element"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/replace-an-element.md","*/","}const replace = (ele: Element, newEle: Element): Element | null => (ele.parentNode ? ele.parentNode.replaceChild(newEle, ele) : null);;"],"description":"Replace an element"},"Scroll to top of the page":{"prefix":["1locgoToTop","1locDOM"],"body":["${1:/**\n * Scroll to top of the page"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/scroll-to-top-of-the-page.md","*/","}const goToTop = (): void => window.scrollTo(0, 0);;"],"description":"Scroll to top of the page"},"Serialize form data":{"prefix":["1locserialize","1locDOM"],"body":["${1:/**\n * Serialize form data"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/serialize-form-data.md","*/","}const serialize = (formEle) => Array.from(new FormData(formEle)).reduce((p, [k, v]) => Object.assign({}, p, { [k]: p[k] ? (Array.isArray(p[k]) ? p[k] : [p[k]]).concat(v) : v }), {});;"],"description":"Serialize form data"},"Show an element":{"prefix":["1locshow","1locDOM"],"body":["${1:/**\n * Show an element"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/show-an-element.md","*/","}const show = (ele: HTMLElement): string => (ele.style.display = '');;"],"description":"Show an element"},"Strip HTML from a given text":{"prefix":["1locstripHtml","1locDOM"],"body":["${1:/**\n * Strip HTML from a given text"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/strip-html-from-a-given-text.md","*/","}const stripHtml = (html: string): string => new DOMParser().parseFromString(html, 'text/html').body.textContent || '';;"],"description":"Strip HTML from a given text"},"Toggle an element":{"prefix":["1loctoggle","1locDOM"],"body":["${1:/**\n * Toggle an element"," * https://github.com/1milligram/1loc/blob/master/snippets/dom/toggle-an-element.md","\n  // Similar üëáüèº","  const toggle = (ele: HTMLElement): boolean => (ele.hidden = !ele.hidden);","*/","}const toggle = (ele: HTMLElement): string => (ele.style.display = ele.style.display === 'none' ? 'block' : 'none');"],"description":"Toggle an element"},"Box handler":{"prefix":["1locboxHandler","1locFunction"],"body":["${1:/**\n * Box handler"," * https://github.com/1milligram/1loc/blob/master/snippets/function/box-handler.md","*/","}const boxHandler = (x) => ({ next: (f) => boxHandler(f(x)), done: (f) => f(x) });;"],"description":"Box handler"},"Check if a value is a function":{"prefix":["1locisFunction","1locFunction"],"body":["${1:/**\n * Check if a value is a function"," * https://github.com/1milligram/1loc/blob/master/snippets/function/check-if-a-value-is-a-function.md","*/","}const isFunction = (v) => ['[object Function]', '[object GeneratorFunction]', '[object AsyncFunction]', '[object Promise]'].includes(Object.prototype.toString.call(v));;"],"description":"Check if a value is a function"},"Check if a value is a generator function":{"prefix":["1locisGeneratorFunction","1locFunction"],"body":["${1:/**\n * Check if a value is a generator function"," * https://github.com/1milligram/1loc/blob/master/snippets/function/check-if-a-value-is-a-generator-function.md","*/","}const isGeneratorFunction = (v) => Object.prototype.toString.call(v) === '[object GeneratorFunction]';;"],"description":"Check if a value is a generator function"},"Check if a value is an async function":{"prefix":["1locisAsyncFunction","1locFunction"],"body":["${1:/**\n * Check if a value is an async function"," * https://github.com/1milligram/1loc/blob/master/snippets/function/check-if-a-value-is-an-async-function.md","*/","}const isAsyncFunction = (v) => Object.prototype.toString.call(v) === '[object AsyncFunction]';;"],"description":"Check if a value is an async function"},"Compose functions from left to right":{"prefix":["1locpipe","1locFunction"],"body":["${1:/**\n * Compose functions from left to right"," * https://github.com/1milligram/1loc/blob/master/snippets/function/compose-functions-from-left-to-right.md","*/","}const pipe = (...fns) => (x) => fns.reduce((y, f) => f(y), x);;"],"description":"Compose functions from left to right"},"Compose functions":{"prefix":["1loccompose","1locFunction"],"body":["${1:/**\n * Compose functions"," * https://github.com/1milligram/1loc/blob/master/snippets/function/compose-functions.md","*/","}const compose = (...fns) => (x) => fns.reduceRight((y, f) => f(y), x);;"],"description":"Compose functions"},"Create a function that accepts a single argument":{"prefix":["1locunary","1locFunction"],"body":["${1:/**\n * Create a function that accepts a single argument"," * https://github.com/1milligram/1loc/blob/master/snippets/function/create-a-function-that-accepts-a-single-argument.md","*/","}const unary = (fn) => (arg) => fn(arg);;"],"description":"Create a function that accepts a single argument"},"Create an empty function":{"prefix":["1locnoop","1locFunction"],"body":["${1:/**\n * Create an empty function"," * https://github.com/1milligram/1loc/blob/master/snippets/function/create-an-empty-function.md","\n  // Similar üëáüèº","  const noop = Function();","*/","}const noop = () => {};"],"description":"Create an empty function"},"Curry a function":{"prefix":["1loccurry","1locFunction"],"body":["${1:/**\n * Curry a function"," * https://github.com/1milligram/1loc/blob/master/snippets/function/curry-a-function.md","*/","}const curry = (fn, ...args) => (fn.length <= args.length ? fn(...args) : curry.bind(null, fn, ...args));;"],"description":"Curry a function"},"Delay the evaluation of a function":{"prefix":["1locthunkfy","1locFunction"],"body":["${1:/**\n * Delay the evaluation of a function"," * https://github.com/1milligram/1loc/blob/master/snippets/function/delay-the-evaluation-of-a-function.md","*/","}const thunkfy = (fn) => (...args) => () => fn(...args);;"],"description":"Delay the evaluation of a function"},"Execute a function once":{"prefix":["1loconce","1locFunction"],"body":["${1:/**\n * Execute a function once"," * https://github.com/1milligram/1loc/blob/master/snippets/function/execute-a-function-once.md","*/","}const once = (fn) => ((ran = false) => () => ran ? fn : ((ran = !ran), (fn = fn())))();;"],"description":"Execute a function once"},"Flip the arguments of a function":{"prefix":["1locflip","1locFunction"],"body":["${1:/**\n * Flip the arguments of a function"," * https://github.com/1milligram/1loc/blob/master/snippets/function/flip-the-arguments-of-a-function.md","\n  // Similar üëáüèº","  const flip = (fn) => (b, a) => fn(a, b)","  const flip = (fn) => (b) => (a) => fn(a)(b);","*/","}const flip = (fn) => (...args) => fn(...args.reverse());"],"description":"Flip the arguments of a function"},"Identity function":{"prefix":["1locidentity","1locFunction"],"body":["${1:/**\n * Identity function"," * https://github.com/1milligram/1loc/blob/master/snippets/function/identity-function.md","*/","}const identity = (x) => x;;"],"description":"Identity function"},"Logical xor operator":{"prefix":["1locxor","1locFunction"],"body":["${1:/**\n * Logical xor operator"," * https://github.com/1milligram/1loc/blob/master/snippets/function/logical-xor-operator.md","\n  // Similar üëáüèº","  const xor = (a, b) => !(!a && !b) && !(a && b)","  const xor = (a, b) => Boolean(!a ^ !b);","*/","}const xor = (a, b) => (a && !b) || (!a && b);"],"description":"Logical xor operator"},"Memoize a function":{"prefix":["1locmemoize","1locFunction"],"body":["${1:/**\n * Memoize a function"," * https://github.com/1milligram/1loc/blob/master/snippets/function/memoize-a-function.md","*/","}const memoize = (fn) => ((cache = Object.create(null)) => (arg) => cache[arg] || (cache[arg] = fn(arg)))();;"],"description":"Memoize a function"},"Partially apply a function":{"prefix":["1locpartial","1locFunction"],"body":["${1:/**\n * Partially apply a function"," * https://github.com/1milligram/1loc/blob/master/snippets/function/partially-apply-a-function.md","*/","}const partial = (fn, ...a) => (...b) => fn(...a, ...b);;"],"description":"Partially apply a function"},"Uncurry a function":{"prefix":["1locuncurry","1locFunction"],"body":["${1:/**\n * Uncurry a function"," * https://github.com/1milligram/1loc/blob/master/snippets/function/uncurry-a-function.md","*/","}const uncurry = (fn, n = 1) => (...args) => ((acc) => (args) => args.reduce((x, y) => x(y), acc))(fn)(args.slice(0, n));;"],"description":"Uncurry a function"},"Calculate the angle of a line defined by two points":{"prefix":["1locPoint","1locMath"],"body":["${1:/**\n * Calculate the angle of a line defined by two points"," * https://github.com/1milligram/1loc/blob/master/snippets/math/calculate-the-angle-of-a-line-defined-by-two-points.md","\n  // Similar üëáüèº","  const degreesAngle = (p1: Point, p2: Point): number => (Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180) / Math.PI;","*/","}interface Point { x: number; y: number;}const radiansAngle = (p1: Point, p2: Point): number => Math.atan2(p2.y - p1.y, p2.x - p1.x);"],"description":"Calculate the angle of a line defined by two points"},"Calculate the distance between two points":{"prefix":["1locPoint","1locMath"],"body":["${1:/**\n * Calculate the distance between two points"," * https://github.com/1milligram/1loc/blob/master/snippets/math/calculate-the-distance-between-two-points.md","*/","}interface Point { x: number; y: number;}const distance = (p1: Point, p2: Point): number => Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));;"],"description":"Calculate the distance between two points"},"Calculate the linear interpolation between two numbers":{"prefix":["1loclerp","1locMath"],"body":["${1:/**\n * Calculate the linear interpolation between two numbers"," * https://github.com/1milligram/1loc/blob/master/snippets/math/calculate-the-linear-interpolation-between-two-numbers.md","*/","}const lerp = (a: number, b: number, amount: number): number => (1 - amount) * a + amount * b;;"],"description":"Calculate the linear interpolation between two numbers"},"Calculate the midpoint between two points":{"prefix":["1locPoint","1locMath"],"body":["${1:/**\n * Calculate the midpoint between two points"," * https://github.com/1milligram/1loc/blob/master/snippets/math/calculate-the-midpoint-between-two-points.md","*/","}interface Point { x: number; y: number;}const midpoint = (p1: Point, p2: Point): number[] => [(p1.x + p2.x) / 2, (p1.y + p2.y) / 2];;"],"description":"Calculate the midpoint between two points"},"Check if a point is inside a rectangle":{"prefix":["1locPoint","1locMath"],"body":["${1:/**\n * Check if a point is inside a rectangle"," * https://github.com/1milligram/1loc/blob/master/snippets/math/check-if-a-point-is-inside-a-rectangle.md","*/","}interface Point { x: number; y: number;}interface Rect { bottom: number; left: number; top: number; right: number;}const isInside = (point: Point, rect: Rect): boolean => point.x > rect.left && point.x < rect.right && point.y > rect.top && point.y < rect.bottom;;"],"description":"Check if a point is inside a rectangle"},"Check if a rectangle contains other one":{"prefix":["1locRect","1locMath"],"body":["${1:/**\n * Check if a rectangle contains other one"," * https://github.com/1milligram/1loc/blob/master/snippets/math/check-if-a-rectangle-contains-other-one.md","*/","}interface Rect { x1: number; x2: number; y1: number; y2: number;}const contains = (a: Rect, b: Rect): boolean => a.x1 <= b.x1 && a.y1 <= b.y1 && a.x2 >= b.x2 && a.y2 >= b.y2;;"],"description":"Check if a rectangle contains other one"},"Check if a rectangle overlaps other one":{"prefix":["1locRect","1locMath"],"body":["${1:/**\n * Check if a rectangle overlaps other one"," * https://github.com/1milligram/1loc/blob/master/snippets/math/check-if-a-rectangle-overlaps-other-one.md","*/","}interface Rect { x1: number; x2: number; y1: number; y2: number;}const contains = (a: Rect, b: Rect): boolean => (a.x1 < b.x2 && b.x1 < a.x2) || (a.y1 < b.y2 && b.y1 < a.y2);;"],"description":"Check if a rectangle overlaps other one"},"Convert degrees to radians":{"prefix":["1locdegsToRads","1locMath"],"body":["${1:/**\n * Convert degrees to radians"," * https://github.com/1milligram/1loc/blob/master/snippets/math/convert-degrees-to-radians.md","*/","}const degsToRads = (deg: number): number => (deg * Math.PI) / 180.0;;"],"description":"Convert degrees to radians"},"Convert radians to degrees":{"prefix":["1locradsToDegs","1locMath"],"body":["${1:/**\n * Convert radians to degrees"," * https://github.com/1milligram/1loc/blob/master/snippets/math/convert-radians-to-degrees.md","*/","}const radsToDegs = (rad: number): number => (rad * 180) / Math.PI;;"],"description":"Convert radians to degrees"},"Normalize the ratio of a number in a range":{"prefix":["1locnormalizeRatio","1locMath"],"body":["${1:/**\n * Normalize the ratio of a number in a range"," * https://github.com/1milligram/1loc/blob/master/snippets/math/normalize-the-ratio-of-a-number-in-a-range.md","*/","}const normalizeRatio = (value: number, min: number, max: number): number => (value - min) / (max - min);;"],"description":"Normalize the ratio of a number in a range"},"Round a number to the nearest multiple of a given value":{"prefix":["1locroundNearest","1locMath"],"body":["${1:/**\n * Round a number to the nearest multiple of a given value"," * https://github.com/1milligram/1loc/blob/master/snippets/math/round-a-number-to-the-nearest-multiple-of-a-given-value.md","*/","}const roundNearest = (value: number, nearest: number): number => Math.round(value / nearest) * nearest;;"],"description":"Round a number to the nearest multiple of a given value"},"Check if the code is running in NodeJS":{"prefix":["1locisNode:","1locMisc"],"body":["${1:/**\n * Check if the code is running in NodeJS"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/check-if-the-code-is-running-in-node-js.md","*/","}const isNode: boolean = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;;"],"description":"Check if the code is running in NodeJS"},"Check if the code is running in the browser":{"prefix":["1locisBrowser:","1locMisc"],"body":["${1:/**\n * Check if the code is running in the browser"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/check-if-the-code-is-running-in-the-browser.md","*/","}const isBrowser: boolean = typeof window === 'object' && typeof document === 'object';;"],"description":"Check if the code is running in the browser"},"Clear all cookies":{"prefix":["1locclearCookies","1locMisc"],"body":["${1:/**\n * Clear all cookies"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/clear-all-cookies.md","*/","}const clearCookies = (): void => document.cookie.split(';').forEach((c) => (document.cookie = c.replace(/^ +/, '').replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`)));;"],"description":"Clear all cookies"},"Convert 3 digits color to 6 digits color":{"prefix":["1loctoFullHexColor","1locMisc"],"body":["${1:/**\n * Convert 3 digits color to 6 digits color"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/convert-3-digits-color-to-6-digits-color.md","*/","}const toFullHexColor = (color: string): string => `#${(color.startsWith('#') ? color.slice(1) : color).split('').map((c) => `${c}${c}`).join('')}`;;"],"description":"Convert 3 digits color to 6 digits color"},"Convert Celsius to Fahrenheit":{"prefix":["1loccelsiusToFahrenheit","1locMisc"],"body":["${1:/**\n * Convert Celsius to Fahrenheit"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/convert-celsius-to-fahrenheit.md","*/","}const celsiusToFahrenheit = (celsius: number): number => (celsius * 9) / 5 + 32;;"],"description":"Convert Celsius to Fahrenheit"},"Convert cookie to object":{"prefix":["1loccookies","1locMisc"],"body":["${1:/**\n * Convert cookie to object"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/convert-cookie-to-object.md","*/","}const cookies = document.cookie.split(';').map((item) => item.split('=')).reduce((acc, [k, v]) => (acc[k.trim().replace('\"', '')] = v) && acc, {});;"],"description":"Convert cookie to object"},"Convert Fahrenheit to Celsius":{"prefix":["1locfahrenheitToCelsius","1locMisc"],"body":["${1:/**\n * Convert Fahrenheit to Celsius"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/convert-fahrenheit-to-celsius.md","*/","}const fahrenheitToCelsius = (fahrenheit: number): number => ((fahrenheit - 32) * 5) / 9;;"],"description":"Convert Fahrenheit to Celsius"},"Convert hex to rgb":{"prefix":["1lochexToRgb","1locMisc"],"body":["${1:/**\n * Convert hex to rgb"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/convert-hex-to-rgb.md","*/","}const hexToRgb = (hex: string): string => hex.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, (_, r, g, b) => `#${r}${r}${g}${g}${b}${b}`).substring(1).match(/.{2}/g).map((x) => parseInt(x, 16));;"],"description":"Convert hex to rgb"},"Convert rgb color to hex":{"prefix":["1locrgbToHex","1locMisc"],"body":["${1:/**\n * Convert rgb color to hex"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/convert-rgb-color-to-hex.md","\n  // Similar üëáüèº","  const rgbToHex = (red: number, green: number, blue: number): string => `#\\${[red, green, blue].map((v) => v.toString(16).padStart(2, '0')).join('')}`;","*/","}const rgbToHex = (red: number, green: number, blue: number): string => `#${((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1)}`;"],"description":"Convert rgb color to hex"},"Convert URL parameters to object":{"prefix":["1locgetUrlParams","1locMisc"],"body":["${1:/**\n * Convert URL parameters to object"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/convert-url-parameters-to-object.md","*/","}const getUrlParams = (query: string): Record<string, string> => (Array.from(new URLSearchParams(query)).reduce((p, [k, v]) => Object.assign({}, p, { [k]: p[k] ? (Array.isArray(p[k]) ? p[k] : [p[k]]).concat(v) : v }), {} as Record<string, string>));;"],"description":"Convert URL parameters to object"},"Decode a JWT token":{"prefix":["1locdecode","1locMisc"],"body":["${1:/**\n * Decode a JWT token"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/decode-a-jwt-token.md","*/","}const decode = (token: string): string => decodeURIComponent(atob(token.split('.')[1].replace('-', '+').replace('_', '/')).split('').map((c) => `%${('00' + c.charCodeAt(0).toString(16)).slice(-2)}`).join(''));;"],"description":"Decode a JWT token"},"Detect dark mode":{"prefix":["1locisDarkMode:","1locMisc"],"body":["${1:/**\n * Detect dark mode"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/detect-dark-mode.md","*/","}const isDarkMode: boolean = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;;"],"description":"Detect dark mode"},"Easing functions":{"prefix":["1loclinear","1locMisc"],"body":["${1:/**\n * Easing functions"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/easing-functions.md","\n  // Similar üëáüèº","  const easeInQuad = (t: number): number => t * t","  const easeOutQuad = (t: number): number => t * (2 - t)","  const easeInOutQuad = (t: number): number => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t)","  const easeInCubic = (t: number): number => t * t * t","  const easeOutCubic = (t: number): number => --t * t * t + 1","  const easeInOutCubic = (t: number): number => (t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1)","  const easeInQuart = (t: number): number => t * t * t * t","  const easeOutQuart = (t: number): number => 1 - --t * t * t * t","  const easeInOutQuart = (t: number): number => (t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t)","  const easeInQuint = (t: number): number => t * t * t * t * t","  const easeOutQuint = (t: number): number => 1 + --t * t * t * t * t","  const easeInOutQuint = (t: number): number => (t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t)","  const easeInSine = (t: number): number => 1 + Math.sin((Math.PI / 2) * t - Math.PI / 2)","  const easeOutSine = (t: number): number => Math.sin((Math.PI / 2) * t)","  const easeInOutSine = (t: number): number => (1 + Math.sin(Math.PI * t - Math.PI / 2)) / 2","  const easeInElastic = (t: number): number => (0.04 - 0.04 / t) * Math.sin(25 * t) + 1","  const easeOutElastic = (t: number): number => ((0.04 * t) / --t) * Math.sin(25 * t)","  const easeInOutElastic = (t: number): number => ((t -= 0.5) < 0 ? (0.02 + 0.01 / t) * Math.sin(50 * t) : (0.02 - 0.01 / t) * Math.sin(50 * t) + 1);","*/","}const linear = (t: number): number => t;"],"description":"Easing functions"},"Emulate a dice throw":{"prefix":["1locthrowdice","1locMisc"],"body":["${1:/**\n * Emulate a dice throw"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/emulate-a-dice-throw.md","*/","}const throwdice = (): number => ~~(Math.random() * 6) + 1;;"],"description":"Emulate a dice throw"},"Encode a URL":{"prefix":["1locencode","1locMisc"],"body":["${1:/**\n * Encode a URL"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/encode-a-url.md","*/","}const encode = (url: string): string => encodeURIComponent(url).replace(/!/g, '%21').replace(/~/g, '%7E').replace(/\\*/g, '%2A').replace(/'/g, '%27').replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%20/g, '+');;"],"description":"Encode a URL"},"Generate an unique and increment id":{"prefix":["1locuid","1locMisc"],"body":["${1:/**\n * Generate an unique and increment id"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/generate-an-unique-and-increment-id.md","*/","}const uid = (() => ((id = 0), () => id++))();;"],"description":"Generate an unique and increment id"},"Get the first defined and non null argument":{"prefix":["1loccoalesce","1locMisc"],"body":["${1:/**\n * Get the first defined and non null argument"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/get-the-first-defined-and-non-null-argument.md","\n  // Similar üëáüèº","  const coalesce = (...args: any[]): any[] => args.find((item) => ![undefined, null].includes(item));","*/","}const coalesce = (...args: any[]): any[] => args.find((item) => item !== undefined && item !== null);"],"description":"Get the first defined and non null argument"},"Get the value of a cookie":{"prefix":["1loccookie","1locMisc"],"body":["${1:/**\n * Get the value of a cookie"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/get-the-value-of-a-cookie.md","*/","}const cookie = (name) => `; ${document.cookie}`.split(`; ${name}=`).pop().split(';').shift();;"],"description":"Get the value of a cookie"},"Get the value of a param from a URL":{"prefix":["1locgetParam","1locMisc"],"body":["${1:/**\n * Get the value of a param from a URL"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/get-the-value-of-a-param-from-a-url.md","*/","}const getParam = (url: string, param: string): string | null => new URLSearchParams(new URL(url).search).get(param);;"],"description":"Get the value of a param from a URL"},"Get type of a variable in string":{"prefix":["1locgetTypeOf","1locMisc"],"body":["${1:/**\n * Get type of a variable in string"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/get-type-of-a-variable-in-string.md","*/","}const getTypeOf = (obj: any): string => (Object.prototype.toString.call(obj).match(/\\[object (.*)\\]/) as string[])[1];;"],"description":"Get type of a variable in string"},"Redirect the page to HTTPS if it is in HTTP":{"prefix":["1locredirectHttps","1locMisc"],"body":["${1:/**\n * Redirect the page to HTTPS if it is in HTTP"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/redirect-the-page-to-https-if-it-is-in-http.md","*/","}const redirectHttps = (): void => (location.protocol === 'https:' ? void 0 : location.replace(`https:const redirectHttps = (): string => (location.protocol === 'https:' ? '' : (location.protocol = 'https:'));;"],"description":"Redirect the page to HTTPS if it is in HTTP"},"Run Promises in sequence":{"prefix":["1locrun","1locMisc"],"body":["${1:/**\n * Run Promises in sequence"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/run-promises-in-sequence.md","*/","}const run = (promises: Promise<any>[]): Promise<any> => promises.reduce((p, c) => p.then((rp) => c.then((rc) => [...rp, rc])), Promise.resolve([]));;"],"description":"Run Promises in sequence"},"Swap two variables":{"prefix":["1locb]","1locMisc"],"body":["${1:/**\n * Swap two variables"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/swap-two-variables.md","*/","}[a, b] = [b, a];a = [b, (b = a)][0];a = ((x) => x)(b, (b = a));a = b + ((b = a), 0);a = b * ((b = a), 1);;"],"description":"Swap two variables"},"Wait for an amount of time":{"prefix":["1locwait","1locMisc"],"body":["${1:/**\n * Wait for an amount of time"," * https://github.com/1milligram/1loc/blob/master/snippets/misc/wait-for-an-amount-of-time.md","*/","}const wait = async (milliseconds: number) => new Promise((resolve) => setTimeout(resolve, milliseconds));;"],"description":"Wait for an amount of time"},"Add an ordinal suffix to a number":{"prefix":["1locaddOrdinal","1locNumber"],"body":["${1:/**\n * Add an ordinal suffix to a number"," * https://github.com/1milligram/1loc/blob/master/snippets/number/add-an-ordinal-suffix-to-a-number.md","\n  // Similar üëáüèº","  const addOrdinal = (n: number): string => `\\${n}\\${[, 'st', 'nd', 'rd'][/1?.\\$/.exec(n)] || 'th'}`","  const addOrdinal = (n: number): string => `\\${n}\\${[, 'st', 'nd', 'rd'][(n % 100 >> 3) ^ 1 && n % 10] || 'th'}`","  const addOrdinal = (n: number): string => `\\${n}\\${{ one: 'st', two: 'nd', few: 'rd', other: 'th' }[new Intl.PluralRules('en', { type: 'ordinal' }).select(n)]}`;","*/","}const addOrdinal = (n: number): string => `${n}${['st', 'nd', 'rd'][((((n + 90) % 100) - 10) % 10) - 1] || 'th'}`;"],"description":"Add an ordinal suffix to a number"},"Calculate Fibonacci numbers":{"prefix":["1locfibo","1locNumber"],"body":["${1:/**\n * Calculate Fibonacci numbers"," * https://github.com/1milligram/1loc/blob/master/snippets/number/calculate-fibonacci-numbers.md","*/","}const fibo = (n: number, memo: Record<string, number> = {}): number => memo[n] || (n <= 2 ? 1 : (memo[n] = fibo(n - 1, memo) + fibo(n - 2, memo)));;"],"description":"Calculate Fibonacci numbers"},"Calculate the average of arguments":{"prefix":["1locaverage","1locNumber"],"body":["${1:/**\n * Calculate the average of arguments"," * https://github.com/1milligram/1loc/blob/master/snippets/number/calculate-the-average-of-arguments.md","*/","}const average = (...args: number[]): number => args.reduce((a, b) => a + b) / args.length;;"],"description":"Calculate the average of arguments"},"Calculate the division of arguments":{"prefix":["1locdivision","1locNumber"],"body":["${1:/**\n * Calculate the division of arguments"," * https://github.com/1milligram/1loc/blob/master/snippets/number/calculate-the-division-of-arguments.md","*/","}const division = (...args: number): number => args.reduce((a, b) => a / b);;"],"description":"Calculate the division of arguments"},"Calculate the factorial of a number":{"prefix":["1locfactorial","1locNumber"],"body":["${1:/**\n * Calculate the factorial of a number"," * https://github.com/1milligram/1loc/blob/master/snippets/number/calculate-the-factorial-of-a-number.md","*/","}const factorial = (n: number): number => (n <= 1 ? 1 : n * factorial(n - 1));;"],"description":"Calculate the factorial of a number"},"Calculate the mod of collection index":{"prefix":["1locmod","1locNumber"],"body":["${1:/**\n * Calculate the mod of collection index"," * https://github.com/1milligram/1loc/blob/master/snippets/number/calculate-the-mod-of-collection-index.md","*/","}const mod = (a: number, b: number): number => ((a % b) + b) % b;;"],"description":"Calculate the mod of collection index"},"Calculate the remainder of division of arguments":{"prefix":["1locremainder","1locNumber"],"body":["${1:/**\n * Calculate the remainder of division of arguments"," * https://github.com/1milligram/1loc/blob/master/snippets/number/calculate-the-remainder-of-division-of-arguments.md","*/","}const remainder = (...args: number[]): number => args.reduce((a, b) => a % b);;"],"description":"Calculate the remainder of division of arguments"},"Calculate the sum of arguments":{"prefix":["1locsum","1locNumber"],"body":["${1:/**\n * Calculate the sum of arguments"," * https://github.com/1milligram/1loc/blob/master/snippets/number/calculate-the-sum-of-arguments.md","*/","}const sum = (...args: number[]): number => args.reduce((a, b) => a + b);;"],"description":"Calculate the sum of arguments"},"Clamp a number between two values":{"prefix":["1locclamp","1locNumber"],"body":["${1:/**\n * Clamp a number between two values"," * https://github.com/1milligram/1loc/blob/master/snippets/number/clamp-a-number-between-two-values.md","*/","}const clamp = (val: number, min: number = 0, max: number = 1): number => Math.max(min, Math.min(max, val));;"],"description":"Clamp a number between two values"},"Compute the greatest common divisor between two numbers":{"prefix":["1locgcd","1locNumber"],"body":["${1:/**\n * Compute the greatest common divisor between two numbers"," * https://github.com/1milligram/1loc/blob/master/snippets/number/compute-the-greatest-common-divisor-between-two-numbers.md","*/","}const gcd = (a: number, b: number): number => (b === 0 ? a : gcd(b, a % b));;"],"description":"Compute the greatest common divisor between two numbers"},"Convert a number to equivalent characters":{"prefix":["1loctoChars","1locNumber"],"body":["${1:/**\n * Convert a number to equivalent characters"," * https://github.com/1milligram/1loc/blob/master/snippets/number/convert-a-number-to-equivalent-characters.md","*/","}const toChars = (n: number): string => `${n >= 26 ? toChars(Math.floor(n / 26) - 1) : ''}${'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[n % 26]}`;;"],"description":"Convert a number to equivalent characters"},"Convert a string to number":{"prefix":["1loctoNumber","1locNumber"],"body":["${1:/**\n * Convert a string to number"," * https://github.com/1milligram/1loc/blob/master/snippets/number/convert-a-string-to-number.md","*/","}const toNumber = (str: string): number => +str;;"],"description":"Convert a string to number"},"Convert decimal to binary recursively":{"prefix":["1locdecToBi","1locNumber"],"body":["${1:/**\n * Convert decimal to binary recursively"," * https://github.com/1milligram/1loc/blob/master/snippets/number/convert-decimal-to-binary-recursively.md","*/","}const decToBi = (num: number): number => (num === 0 ? 0 : (num % 2) + 10 * decToBi(~~(num / 2)));;"],"description":"Convert decimal to binary recursively"},"Get the arrays of digits from a number":{"prefix":["1locdigitize","1locNumber"],"body":["${1:/**\n * Get the arrays of digits from a number"," * https://github.com/1milligram/1loc/blob/master/snippets/number/get-the-arrays-of-digits-from-a-number.md","\n  // Similar üëáüèº","  const digitize = (n: number): number[] => [...`\\${n}`].map((v) => parseInt(v, 10));","*/","}const digitize = (n: number): number[] => `${n}`.split('').map((v) => parseInt(v, 10));"],"description":"Get the arrays of digits from a number"},"Multiply arguments":{"prefix":["1locmul","1locNumber"],"body":["${1:/**\n * Multiply arguments"," * https://github.com/1milligram/1loc/blob/master/snippets/number/multiply-arguments.md","*/","}const mul = (...args: number[]): number => args.reduce((a, b) => a * b);;"],"description":"Multiply arguments"},"Prefix an integer with zeros":{"prefix":["1locprefixWithZeros","1locNumber"],"body":["${1:/**\n * Prefix an integer with zeros"," * https://github.com/1milligram/1loc/blob/master/snippets/number/prefix-an-integer-with-zeros.md","\n  // Similar üëáüèº","  const prefixWithZeros = (n: number, length: number): string => `\\${Array(length).join('0')}\\${n}`.slice(-length)","  const prefixWithZeros = (n: number, length: number): string => String(n).padStart(length, '0');","*/","}const prefixWithZeros = (n: number, length: number): string => (n / Math.pow(10, length)).toFixed(length).substr(2);"],"description":"Prefix an integer with zeros"},"Round a number to a given number of digits":{"prefix":["1locround","1locNumber"],"body":["${1:/**\n * Round a number to a given number of digits"," * https://github.com/1milligram/1loc/blob/master/snippets/number/round-a-number-to-a-given-number-of-digits.md","*/","}const round = (n: number, decimals: number = 0): number => Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`);;"],"description":"Round a number to a given number of digits"},"Subtract arguments":{"prefix":["1locsubtract","1locNumber"],"body":["${1:/**\n * Subtract arguments"," * https://github.com/1milligram/1loc/blob/master/snippets/number/subtract-arguments.md","*/","}const subtract = (...args: number[]): number => args.reduce((a, b) => a - b);;"],"description":"Subtract arguments"},"Truncate a number at decimal":{"prefix":["1loctruncate","1locNumber"],"body":["${1:/**\n * Truncate a number at decimal"," * https://github.com/1milligram/1loc/blob/master/snippets/number/truncate-a-number-at-decimal.md","*/","}const truncate = (n: number): number => ~~n;;"],"description":"Truncate a number at decimal"},"Truncate a number to a given number of decimal places without rounding":{"prefix":["1loctoFixed","1locNumber"],"body":["${1:/**\n * Truncate a number to a given number of decimal places without rounding"," * https://github.com/1milligram/1loc/blob/master/snippets/number/truncate-a-number-to-a-given-number-of-decimal-places-without-rounding.md","\n  // Similar üëáüèº","  const toFixed = (n: number, fixed: number): number => ~~(Math.pow(10, fixed) * n) / Math.pow(10, fixed);","*/","}const toFixed = (n: number, fixed: number): number => +(`${n}`.match(new RegExp(`^-?\\\\d+(?:\\.\\\\d{0,${fixed}})?`)) as string[])[0];"],"description":"Truncate a number to a given number of decimal places without rounding"},"Check if multiple objects are equal":{"prefix":["1locisEqual","1locObject"],"body":["${1:/**\n * Check if multiple objects are equal"," * https://github.com/1milligram/1loc/blob/master/snippets/object/check-if-multiple-objects-are-equal.md","*/","}const isEqual = (...objects: object[]): boolean => objects.every((obj) => JSON.stringify(obj) === JSON.stringify(objects[0]));;"],"description":"Check if multiple objects are equal"},"Create an empty map that does not have properties":{"prefix":["1locmap","1locObject"],"body":["${1:/**\n * Create an empty map that does not have properties"," * https://github.com/1milligram/1loc/blob/master/snippets/object/create-an-empty-map-that-does-not-have-properties.md","*/","}const map = Object.create(null);;"],"description":"Create an empty map that does not have properties"},"Create an object from the pairs of key and value":{"prefix":["1loctoObj","1locObject"],"body":["${1:/**\n * Create an object from the pairs of key and value"," * https://github.com/1milligram/1loc/blob/master/snippets/object/create-an-object-from-the-pairs-of-key-and-value.md","\n  // Similar üëáüèº","  const toObj = (arr) => arr.reduce((a, c) => ((a[c[0]] = c[1]), a), {});","*/","}const toObj = (arr) => Object.fromEntries(arr);"],"description":"Create an object from the pairs of key and value"},"Extract values of a property from an array of objects":{"prefix":["1locpluck","1locObject"],"body":["${1:/**\n * Extract values of a property from an array of objects"," * https://github.com/1milligram/1loc/blob/master/snippets/object/extract-values-of-a-property-from-an-array-of-objects.md","*/","}const pluck = (objs, property) => objs.map((obj) => obj[property]);;"],"description":"Extract values of a property from an array of objects"},"Get the value at given path of an object":{"prefix":["1locgetValue","1locObject"],"body":["${1:/**\n * Get the value at given path of an object"," * https://github.com/1milligram/1loc/blob/master/snippets/object/get-the-value-at-given-path-of-an-object.md","*/","}const getValue = (path, obj) => path.split('.').reduce((acc, c) => acc && acc[c], obj);;"],"description":"Get the value at given path of an object"},"Immutably rename object keys":{"prefix":["1locrenameKeys","1locObject"],"body":["${1:/**\n * Immutably rename object keys"," * https://github.com/1milligram/1loc/blob/master/snippets/object/immutably-rename-object-keys.md","*/","}const renameKeys = (keysMap, obj) => Object.keys(obj).reduce((acc, key) => ({ ...acc, ...{ [keysMap[key] || key]: obj[key] } }), {});;"],"description":"Immutably rename object keys"},"Invert keys and values of an object":{"prefix":["1locinvert","1locObject"],"body":["${1:/**\n * Invert keys and values of an object"," * https://github.com/1milligram/1loc/blob/master/snippets/object/invert-keys-and-values-of-an-object.md","\n  // Similar üëáüèº","  const invert = (obj) => Object.fromEntries(Object.entries(obj).map(([k, v]) => [v, k]));","*/","}const invert = (obj) => Object.keys(obj).reduce((res, k) => Object.assign(res, { [obj[k]]: k }), {});"],"description":"Invert keys and values of an object"},"Omit a subset of properties from an object":{"prefix":["1locomit","1locObject"],"body":["${1:/**\n * Omit a subset of properties from an object"," * https://github.com/1milligram/1loc/blob/master/snippets/object/omit-a-subset-of-properties-from-an-object.md","*/","}const omit = (obj, keys) => Object.keys(obj).filter((k) => !keys.includes(k)).reduce((res, k) => Object.assign(res, { [k]: obj[k] }), {});;"],"description":"Omit a subset of properties from an object"},"Pick a subset of properties of an object":{"prefix":["1locpick","1locObject"],"body":["${1:/**\n * Pick a subset of properties of an object"," * https://github.com/1milligram/1loc/blob/master/snippets/object/pick-a-subset-of-properties-of-an-object.md","*/","}const pick = (obj, keys) => Object.keys(obj).filter((k) => keys.includes(k)).reduce((res, k) => Object.assign(res, { [k]: obj[k] }), {});;"],"description":"Pick a subset of properties of an object"},"Remove all null and undefined properties from an object":{"prefix":["1locremoveNullUndefined","1locObject"],"body":["${1:/**\n * Remove all null and undefined properties from an object"," * https://github.com/1milligram/1loc/blob/master/snippets/object/remove-all-null-and-undefined-properties-from-an-object.md","\n  // Similar üëáüèº","  const removeNullUndefined = (obj) => Object.entries(obj).filter(([_, v]) => v != null).reduce((acc, [k, v]) => ({ ...acc, [k]: v }), {})","  const removeNullUndefined = (obj) => Object.fromEntries(Object.entries(obj).filter(([_, v]) => v != null));","*/","}const removeNullUndefined = (obj) => Object.entries(obj).reduce((a, [k, v]) => (v == null ? a : ((a[k] = v), a)), {});"],"description":"Remove all null and undefined properties from an object"},"Shallow copy an object":{"prefix":["1locshallowCopy","1locObject"],"body":["${1:/**\n * Shallow copy an object"," * https://github.com/1milligram/1loc/blob/master/snippets/object/shallow-copy-an-object.md","\n  // Similar üëáüèº","  const shallowCopy = obj => {...obj};","*/","}const shallowCopy = obj => Object.assign({}, obj);"],"description":"Shallow copy an object"},"Sort an object by its properties":{"prefix":["1locsort","1locObject"],"body":["${1:/**\n * Sort an object by its properties"," * https://github.com/1milligram/1loc/blob/master/snippets/object/sort-an-object-by-its-properties.md","*/","}const sort = (obj) => Object.keys(obj).sort().reduce((p, c) => ((p[c] = obj[c]), p), {});;"],"description":"Sort an object by its properties"},"Generate a random boolean":{"prefix":["1locrandomBoolean","1locRandom"],"body":["${1:/**\n * Generate a random boolean"," * https://github.com/1milligram/1loc/blob/master/snippets/random/generate-a-random-boolean.md","*/","}const randomBoolean = (): boolean => Math.random() >= 0.5;;"],"description":"Generate a random boolean"},"Generate a random floating point number in given range":{"prefix":["1locrandomFloat","1locRandom"],"body":["${1:/**\n * Generate a random floating point number in given range"," * https://github.com/1milligram/1loc/blob/master/snippets/random/generate-a-random-floating-point-number-in-given-range.md","*/","}const randomFloat = (min: number, max: number): number => Math.random() * (max - min) + min;;"],"description":"Generate a random floating point number in given range"},"Generate a random hex color":{"prefix":["1locrandomColor","1locRandom"],"body":["${1:/**\n * Generate a random hex color"," * https://github.com/1milligram/1loc/blob/master/snippets/random/generate-a-random-hex-color.md","\n  // Similar üëáüèº","  const randomColor = (): string => `#\\${(~~(Math.random() * (1 << 24))).toString(16)}`;","*/","}const randomColor = (): string => `#${Math.random().toString(16).slice(2, 8).padEnd(6, '0')}`;"],"description":"Generate a random hex color"},"Generate a random integer in given range":{"prefix":["1locrandomInteger","1locRandom"],"body":["${1:/**\n * Generate a random integer in given range"," * https://github.com/1milligram/1loc/blob/master/snippets/random/generate-a-random-integer-in-given-range.md","*/","}const randomInteger = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1)) + min;;"],"description":"Generate a random integer in given range"},"Generate a random IP address":{"prefix":["1locrandomIp","1locRandom"],"body":["${1:/**\n * Generate a random IP address"," * https://github.com/1milligram/1loc/blob/master/snippets/random/generate-a-random-ip-address.md","*/","}const randomIp = (): number => Array(4).fill(0).map((_, i) => Math.floor(Math.random() * 255) + (i === 0 ? 1 : 0)).join('.');;"],"description":"Generate a random IP address"},"Generate a random sign":{"prefix":["1locrandomSign","1locRandom"],"body":["${1:/**\n * Generate a random sign"," * https://github.com/1milligram/1loc/blob/master/snippets/random/generate-a-random-sign.md","*/","}const randomSign = (): number => (Math.random() >= 0.5 ? 1 : -1);;"],"description":"Generate a random sign"},"Generate a random string from given characters":{"prefix":["1locgenerateString","1locRandom"],"body":["${1:/**\n * Generate a random string from given characters"," * https://github.com/1milligram/1loc/blob/master/snippets/random/generate-a-random-string-from-given-characters.md","*/","}const generateString = (length: number, chars: string) => Array(length).fill('').map((v) => chars[Math.floor(Math.random() * chars.length)]).join('');;"],"description":"Generate a random string from given characters"},"Generate a random string using Node crypto module":{"prefix":["1locrandomStr","1locRandom"],"body":["${1:/**\n * Generate a random string using Node crypto module"," * https://github.com/1milligram/1loc/blob/master/snippets/random/generate-a-random-string-using-node-crypto-module.md","*/","}const randomStr = (): string => require('crypto').randomBytes(32).toString('hex');;"],"description":"Generate a random string using Node crypto module"},"Generate a random string with given length":{"prefix":["1locgenerateString","1locRandom"],"body":["${1:/**\n * Generate a random string with given length"," * https://github.com/1milligram/1loc/blob/master/snippets/random/generate-a-random-string-with-given-length.md","*/","}const generateString = (length: number): string => Array(length).fill('').map((v) => Math.random().toString(36).charAt(2)).join('');;"],"description":"Generate a random string with given length"},"Generate a random UUID":{"prefix":["1locuuid","1locRandom"],"body":["${1:/**\n * Generate a random UUID"," * https://github.com/1milligram/1loc/blob/master/snippets/random/generate-a-random-uuid.md","*/","}const uuid = (a) => (a ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid));;"],"description":"Generate a random UUID"},"Generate an array of random integers in a given range":{"prefix":["1locrandomArrayInRange","1locRandom"],"body":["${1:/**\n * Generate an array of random integers in a given range"," * https://github.com/1milligram/1loc/blob/master/snippets/random/generate-an-array-of-random-integers-in-a-given-range.md","*/","}const randomArrayInRange = (min: number, max: number, n: number): number[] => Array.from({ length: n }, () => Math.floor(Math.random() * (max - min + 1)) + min);;"],"description":"Generate an array of random integers in a given range"},"Get a random item and remove it from an array":{"prefix":["1locrandomItem","1locRandom"],"body":["${1:/**\n * Get a random item and remove it from an array"," * https://github.com/1milligram/1loc/blob/master/snippets/random/get-a-random-item-and-remove-it-from-an-array.md","*/","}const randomItem = <T,>(arr: T[]): T => arr.splice((Math.random() * arr.length) | 0, 1) as unknown as T;;"],"description":"Get a random item and remove it from an array"},"Get a random item from an array":{"prefix":["1locrandomItem","1locRandom"],"body":["${1:/**\n * Get a random item from an array"," * https://github.com/1milligram/1loc/blob/master/snippets/random/get-a-random-item-from-an-array.md","*/","}const randomItem = <T,_>(arr: T[]): T => arr[(Math.random() * arr.length) | 0];;"],"description":"Get a random item from an array"},"Get random items of an array":{"prefix":["1locrandomItems","1locRandom"],"body":["${1:/**\n * Get random items of an array"," * https://github.com/1milligram/1loc/blob/master/snippets/random/get-random-items-of-an-array.md","*/","}const randomItems = (arr, count) => arr.concat().reduce((p, _, __, arr) => (p[0] < count ? [p[0] + 1, p[1].concat(arr.splice((Math.random() * arr.length) | 0, 1))] : p), [0, []])[1];;"],"description":"Get random items of an array"},"Pick a random property of an object":{"prefix":["1locrandomProp","1locRandom"],"body":["${1:/**\n * Pick a random property of an object"," * https://github.com/1milligram/1loc/blob/master/snippets/random/pick-a-random-property-of-an-object.md","*/","}const randomProp = (obj: object): any => Object.keys(obj)[(Math.random() * Object.keys(obj).length) | 0];;"],"description":"Pick a random property of an object"},"Pick random lines from a text document":{"prefix":["1locrandomLines","1locRandom"],"body":["${1:/**\n * Pick random lines from a text document"," * https://github.com/1milligram/1loc/blob/master/snippets/random/pick-random-lines-from-a-text-document.md","*/","}const randomLines = (str, count) => str.split(/\\r?\\n/).reduce((p, _, __, arr) => (p[0] < count ? [p[0] + 1, p[1].concat(arr.splice((Math.random() * arr.length) | 0, 1))] : p), [0, []])[1];;"],"description":"Pick random lines from a text document"},"Capitalize a string":{"prefix":["1loccapitalize","1locString"],"body":["${1:/**\n * Capitalize a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/capitalize-a-string.md","\n  // Similar üëáüèº","  const capitalize = ([first, ...rest]: string): string => `\\${first.toUpperCase()}\\${rest.join('')}`;","*/","}const capitalize = (str: string): string => `${str.charAt(0).toUpperCase()}${str.slice(1)}`;"],"description":"Capitalize a string"},"Check if a path is relative":{"prefix":["1locisRelative","1locString"],"body":["${1:/**\n * Check if a path is relative"," * https://github.com/1milligram/1loc/blob/master/snippets/string/check-if-a-path-is-relative.md","*/","}const isRelative = (path: string): boolean => !/^([a-z]+:)?[\\\\/]/i.test(path);;"],"description":"Check if a path is relative"},"Check if a string consists of a repeated character sequence":{"prefix":["1locconsistsRepeatedSubstring","1locString"],"body":["${1:/**\n * Check if a string consists of a repeated character sequence"," * https://github.com/1milligram/1loc/blob/master/snippets/string/check-if-a-string-consists-of-a-repeated-character-sequence.md","*/","}const consistsRepeatedSubstring = (str: string): boolean => `${str}${str}`.indexOf(str, 1) !== str.length;;"],"description":"Check if a string consists of a repeated character sequence"},"Check if a string is a palindrome":{"prefix":["1locisPalindrome","1locString"],"body":["${1:/**\n * Check if a string is a palindrome"," * https://github.com/1milligram/1loc/blob/master/snippets/string/check-if-a-string-is-a-palindrome.md","*/","}const isPalindrome = (str: string): boolean => str === str.split('').reverse().join('');;"],"description":"Check if a string is a palindrome"},"Check if a URL is absolute":{"prefix":["1locisAbsoluteUrl","1locString"],"body":["${1:/**\n * Check if a URL is absolute"," * https://github.com/1milligram/1loc/blob/master/snippets/string/check-if-a-url-is-absolute.md","*/","}const isAbsoluteUrl = (url: string): boolean => /^[a-z][a-z0-9+.-]*:/.test(url);;"],"description":"Check if a URL is absolute"},"Check if two strings are anagram":{"prefix":["1locareAnagram","1locString"],"body":["${1:/**\n * Check if two strings are anagram"," * https://github.com/1milligram/1loc/blob/master/snippets/string/check-if-two-strings-are-anagram.md","*/","}const areAnagram = (str1: string, str2: string): boolean => str1.toLowerCase().split('').sort().join('') === str2.toLowerCase().split('').sort().join('');;"],"description":"Check if two strings are anagram"},"Convert a base64 encoded string to an uint8 array":{"prefix":["1locbase64ToUint8","1locString"],"body":["${1:/**\n * Convert a base64 encoded string to an uint8 array"," * https://github.com/1milligram/1loc/blob/master/snippets/string/convert-a-base64-encoded-string-to-an-uint8-array.md","*/","}const base64ToUint8 = (str: string): Uint8Array => Uint8Array.from(atob(str), (c) => c.charCodeAt(0));;"],"description":"Convert a base64 encoded string to an uint8 array"},"Convert a letter to associate emoji":{"prefix":["1locletterToEmoji","1locString"],"body":["${1:/**\n * Convert a letter to associate emoji"," * https://github.com/1milligram/1loc/blob/master/snippets/string/convert-a-letter-to-associate-emoji.md","*/","}const letterToEmoji = (c: string): string => String.fromCodePoint(c.toLowerCase().charCodeAt(0) + 127365);;"],"description":"Convert a letter to associate emoji"},"Convert a string to camelCase":{"prefix":["1loctoCamelCase","1locString"],"body":["${1:/**\n * Convert a string to camelCase"," * https://github.com/1milligram/1loc/blob/master/snippets/string/convert-a-string-to-camel-case.md","*/","}const toCamelCase = (str: string): string => str.trim().replace(/[-_\\s]+(.)?/g, (_, c) => (c ? c.toUpperCase() : ''));;"],"description":"Convert a string to camelCase"},"Convert a string to PascalCase":{"prefix":["1loctoPascalCase","1locString"],"body":["${1:/**\n * Convert a string to PascalCase"," * https://github.com/1milligram/1loc/blob/master/snippets/string/convert-a-string-to-pascal-case.md","*/","}const toPascalCase = (str: string): string => (str.match(/[a-zA-Z0-9]+/g) || []).map((w) => `${w.charAt(0).toUpperCase()}${w.slice(1)}`).join('');;"],"description":"Convert a string to PascalCase"},"Convert a string to URL slug":{"prefix":["1locslugify","1locString"],"body":["${1:/**\n * Convert a string to URL slug"," * https://github.com/1milligram/1loc/blob/master/snippets/string/convert-a-string-to-url-slug.md","*/","}const slugify = (str: string): string => str.toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w-]+/g, '');;"],"description":"Convert a string to URL slug"},"Convert a Windows file path to Unix path":{"prefix":["1loctoUnixPath","1locString"],"body":["${1:/**\n * Convert a Windows file path to Unix path"," * https://github.com/1milligram/1loc/blob/master/snippets/string/convert-a-windows-file-path-to-unix-path.md","*/","}const toUnixPath = (path: string): string => path.replace(/[\\\\/]+/g, '/').replace(/^([a-zA-Z]+:|\\.\\/)/, '');;"],"description":"Convert a Windows file path to Unix path"},"Convert an uint8 array to a base64 encoded string":{"prefix":["1locuint8ToBase64","1locString"],"body":["${1:/**\n * Convert an uint8 array to a base64 encoded string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/convert-an-uint8-array-to-a-base64-encoded-string.md","\n  // Similar üëáüèº","  const uint8ToBase64 = (arr: Uint8Array): string => Buffer.from(arr).toString('base64');","*/","}const uint8ToBase64 = (arr: Uint8Array): string => btoa(Array(arr.length).fill('').map((_, i) => String.fromCharCode(arr[i])).join(''));"],"description":"Convert an uint8 array to a base64 encoded string"},"Convert camelCase to kebab-case and vice versa":{"prefix":["1lockebabToCamel","1locString"],"body":["${1:/**\n * Convert camelCase to kebab-case and vice versa"," * https://github.com/1milligram/1loc/blob/master/snippets/string/convert-camel-case-to-kebab-case-and-vice-versa.md","\n  // Similar üëáüèº","  const camelToKebab = (str: string): string => str.replace(/([a-z0-9])([A-Z])/g, '\\$1-\\$2').toLowerCase();","*/","}const kebabToCamel = (str: string): string => str.replace(/-./g, (m) => m.toUpperCase()[1]);"],"description":"Convert camelCase to kebab-case and vice versa"},"Convert snake_case to camelCase":{"prefix":["1locsnakeToCamel","1locString"],"body":["${1:/**\n * Convert snake_case to camelCase"," * https://github.com/1milligram/1loc/blob/master/snippets/string/convert-snake-case-to-camel-case.md","*/","}const snakeToCamel = (str: string): string => str.toLowerCase().replace(/(_\\w)/g, (m) => m.toUpperCase().substr(1));;"],"description":"Convert snake_case to camelCase"},"Convert the name of an Excel column to number":{"prefix":["1locgetIndex","1locString"],"body":["${1:/**\n * Convert the name of an Excel column to number"," * https://github.com/1milligram/1loc/blob/master/snippets/string/convert-the-name-of-an-excel-column-to-number.md","*/","}const getIndex = (col: string): number => col.split('').reduce((prev, next) => prev * 26 + parseInt(next, 36) - 9, 0);;"],"description":"Convert the name of an Excel column to number"},"Count the number of words in a string":{"prefix":["1loccountWords","1locString"],"body":["${1:/**\n * Count the number of words in a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/count-the-number-of-words-in-a-string.md","*/","}const countWords = (str: string): number => str.trim().split(/\\s+/).length;;"],"description":"Count the number of words in a string"},"Count the occurrences of a character in a string":{"prefix":["1loccountOccurrences","1locString"],"body":["${1:/**\n * Count the occurrences of a character in a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/count-the-occurrences-of-a-character-in-a-string.md","\n  // Similar üëáüèº","  const countOccurrences = (str: string, char: string): number => str.split('').reduce((a, v) => (v === char ? a + 1 : a), 0)","  const countOccurrences = (str: string, char: string): number => [...str].filter((item) => item === char).length","  const countOccurrences = (str: string, char: string): number => str.split('').filter((item) => item === char).length;","*/","}const countOccurrences = (str: string, char: string): number => [...str].reduce((a, v) => (v === char ? a + 1 : a), 0);"],"description":"Count the occurrences of a character in a string"},"Decapitalize a string":{"prefix":["1locdecapitalize","1locString"],"body":["${1:/**\n * Decapitalize a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/decapitalize-a-string.md","\n  // Similar üëáüèº","  const decapitalize = ([first, ...rest]: string): string => `\\${first.toLowerCase()}\\${rest.join('')}`;","*/","}const decapitalize = (str: string): string => `${str.charAt(0).toLowerCase()}${str.slice(1)}`;"],"description":"Decapitalize a string"},"Escape HTML special characters":{"prefix":["1locescape","1locString"],"body":["${1:/**\n * Escape HTML special characters"," * https://github.com/1milligram/1loc/blob/master/snippets/string/escape-html-special-characters.md","\n  // Similar üëáüèº","  const escape = (str: string): string => str.replace(/[&<>\"']/g, (m) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#39;' }[m]));","*/","}const escape = (str: string): string => str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#39;').replace(/\"/g, '&quot;');"],"description":"Escape HTML special characters"},"Format a string":{"prefix":["1locundefined","1locString"],"body":["${1:/**\n * Format a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/format-a-string.md","*/","}undefined"],"description":"Format a string"},"Generate a hash of a string":{"prefix":["1lochash","1locString"],"body":["${1:/**\n * Generate a hash of a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/generate-a-hash-of-a-string.md","\n  // Similar üëáüèº","  const hash = (str: string): number => str.split('').reduce((prev, curr) => ((prev << 5) - prev + curr.charCodeAt(0)) | 0, 0);","*/","}const hash = (str: string): number => str.split('').reduce((prev, curr) => (Math.imul(31, prev) + curr.charCodeAt(0)) | 0, 0);"],"description":"Generate a hash of a string"},"Get the base URL without any parameters":{"prefix":["1locbaseUrl","1locString"],"body":["${1:/**\n * Get the base URL without any parameters"," * https://github.com/1milligram/1loc/blob/master/snippets/string/get-the-base-url-without-any-parameters.md","\n  // Similar üëáüèº","  const baseUrl = (url: string): string => (url.includes('?') ? url.slice(0, url.indexOf('?')) : url)","  const baseUrl = (url: string): string => url.split('?')[0];","*/","}const baseUrl = (url: string): string => (url.indexOf('?') === -1 ? url : url.slice(0, url.indexOf('?')));"],"description":"Get the base URL without any parameters"},"Get the file extension from a file name":{"prefix":["1locext","1locString"],"body":["${1:/**\n * Get the file extension from a file name"," * https://github.com/1milligram/1loc/blob/master/snippets/string/get-the-file-extension-from-a-file-name.md","*/","}const ext = (fileName: string): string => fileName.split('.').pop();;"],"description":"Get the file extension from a file name"},"Get the file name from a URL":{"prefix":["1locfileName","1locString"],"body":["${1:/**\n * Get the file name from a URL"," * https://github.com/1milligram/1loc/blob/master/snippets/string/get-the-file-name-from-a-url.md","*/","}const fileName = (url: string): string => url.substring(url.lastIndexOf('/') + 1);;"],"description":"Get the file name from a URL"},"Get the length of a string in bytes":{"prefix":["1locbytes","1locString"],"body":["${1:/**\n * Get the length of a string in bytes"," * https://github.com/1milligram/1loc/blob/master/snippets/string/get-the-length-of-a-string-in-bytes.md","*/","}const bytes = (str: string): number => new Blob([str]).size;;"],"description":"Get the length of a string in bytes"},"Get the number of a character in a string":{"prefix":["1loccharacterCount","1locString"],"body":["${1:/**\n * Get the number of a character in a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/get-the-number-of-a-character-in-a-string.md","\n  // Similar üëáüèº","  const characterCount = (str: string, char: string): number => str.replace(new RegExp(String.raw`[^\\${char}]`, 'g'), '').length;","*/","}const characterCount = (str: string, char: string): number => str.split(char).length - 1;"],"description":"Get the number of a character in a string"},"Make the first character of a string lowercase":{"prefix":["1loclowercaseFirst","1locString"],"body":["${1:/**\n * Make the first character of a string lowercase"," * https://github.com/1milligram/1loc/blob/master/snippets/string/make-the-first-character-of-a-string-lowercase.md","*/","}const lowercaseFirst = (str: string): string => `${str.charAt(0).toLowerCase()}${str.slice(1)}`;;"],"description":"Make the first character of a string lowercase"},"Normalize file path slashes":{"prefix":["1locnormalizePath","1locString"],"body":["${1:/**\n * Normalize file path slashes"," * https://github.com/1milligram/1loc/blob/master/snippets/string/normalize-file-path-slashes.md","*/","}const normalizePath = (path: string): string => path.replace(/[\\\\/]+/g, '/');;"],"description":"Normalize file path slashes"},"Prepend a line number to each line of a text document":{"prefix":["1locprependNumbers","1locString"],"body":["${1:/**\n * Prepend a line number to each line of a text document"," * https://github.com/1milligram/1loc/blob/master/snippets/string/prepend-a-line-number-to-each-line-of-a-text-document.md","*/","}const prependNumbers = (str: string): string => str.split(/\\r?\\n/).map((line, i) => `${(i + 1).toString().padStart(2, ' ')} ${line}`).join('\\n');;"],"description":"Prepend a line number to each line of a text document"},"Remove duplicate lines of a text document":{"prefix":["1locremoveDuplicateLines","1locString"],"body":["${1:/**\n * Remove duplicate lines of a text document"," * https://github.com/1milligram/1loc/blob/master/snippets/string/remove-duplicate-lines-of-a-text-document.md","*/","}const removeDuplicateLines = (str: string): string => Array.from(new Set(str.split(/\\r?\\n/))).join('\\n');;"],"description":"Remove duplicate lines of a text document"},"Remove empty lines of a text document":{"prefix":["1locremoveEmptyLines","1locString"],"body":["${1:/**\n * Remove empty lines of a text document"," * https://github.com/1milligram/1loc/blob/master/snippets/string/remove-empty-lines-of-a-text-document.md","*/","}const removeEmptyLines = (str: string): string => str.split(/\\r?\\n/).filter((line) => line.trim() !== '').join('\\n');;"],"description":"Remove empty lines of a text document"},"Remove spaces from a string":{"prefix":["1locremoveSpaces","1locString"],"body":["${1:/**\n * Remove spaces from a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/remove-spaces-from-a-string.md","*/","}const removeSpaces = (str: string): string => str.replace(/\\s/g, '');;"],"description":"Remove spaces from a string"},"Repeat a string":{"prefix":["1locrepeat","1locString"],"body":["${1:/**\n * Repeat a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/repeat-a-string.md","\n  // Similar üëáüèº","  const repeat = (str: string, numberOfTimes: number): string => Array(numberOfTimes + 1).join(str);","*/","}const repeat = (str: string, numberOfTimes: number): string => str.repeat(numberOfTimes);"],"description":"Repeat a string"},"Replace all line breaks with br elements":{"prefix":["1locnl2br","1locString"],"body":["${1:/**\n * Replace all line breaks with br elements"," * https://github.com/1milligram/1loc/blob/master/snippets/string/replace-all-line-breaks-with-br-elements.md","*/","}const nl2br = (str: string): string => str.replace(new RegExp('\\r?\\n', 'g'), '<br>');;"],"description":"Replace all line breaks with br elements"},"Replace all tab characters with spaces":{"prefix":["1locreplace","1locString"],"body":["${1:/**\n * Replace all tab characters with spaces"," * https://github.com/1milligram/1loc/blob/master/snippets/string/replace-all-tab-characters-with-spaces.md","*/","}const replace = (str: string, numSpaces = 4): string => str.replaceAll('\\t', ' '.repeat(numSpaces));;"],"description":"Replace all tab characters with spaces"},"Replace multiple spaces with a single space":{"prefix":["1locreplaceSpaces","1locString"],"body":["${1:/**\n * Replace multiple spaces with a single space"," * https://github.com/1milligram/1loc/blob/master/snippets/string/replace-multiple-spaces-with-a-single-space.md","\n  // Similar üëáüèº","  const replaceOnlySpaces = (str: string): string => str.replace(/ +/g, ' ');","*/","}const replaceSpaces = (str: string): string => str.replace(/\\s\\s+/g, ' ');"],"description":"Replace multiple spaces with a single space"},"Replace the first given number of characters of a string with another character":{"prefix":["1locmask","1locString"],"body":["${1:/**\n * Replace the first given number of characters of a string with another character"," * https://github.com/1milligram/1loc/blob/master/snippets/string/replace-the-first-given-number-of-characters-of-a-string-with-another-character.md","*/","}const mask = (str: string, num: number, mask: string): string => `${str}`.slice(num).padStart(`${str}`.length, mask);;"],"description":"Replace the first given number of characters of a string with another character"},"Reverse a string":{"prefix":["1locreverse","1locString"],"body":["${1:/**\n * Reverse a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/reverse-a-string.md","\n  // Similar üëáüèº","  const reverse = (str: string): string => [...str].reverse().join('')","  const reverse = (str: string): string => str.split('').reduce((rev, char) => `\\${char}\\${rev}`, '')","  const reverse = (str: string): string => (str === '' ? '' : `\\${reverse(str.substr(1))}\\${str.charAt(0)}`);","*/","}const reverse = (str: string): string => str.split('').reverse().join('');"],"description":"Reverse a string"},"Reverse the order of lines of a text":{"prefix":["1locreverseLines","1locString"],"body":["${1:/**\n * Reverse the order of lines of a text"," * https://github.com/1milligram/1loc/blob/master/snippets/string/reverse-the-order-of-lines-of-a-text.md","*/","}const reverseLines = (str: string): string => str.split(/\\r?\\n/).reverse().join('\\n');;"],"description":"Reverse the order of lines of a text"},"Sort lines of a text document in the alphabetical order":{"prefix":["1locsortLines","1locString"],"body":["${1:/**\n * Sort lines of a text document in the alphabetical order"," * https://github.com/1milligram/1loc/blob/master/snippets/string/sort-lines-of-a-text-document-in-the-alphabetical-order.md","\n  // Similar üëáüèº","  const reverseSortedLines = (str: string): string => str.split(/\\r?\\n/).sort().reverse().join('\\n');","*/","}const sortLines = (str: string): string => str.split(/\\r?\\n/).sort().join('\\n');"],"description":"Sort lines of a text document in the alphabetical order"},"Sort the characters of a string in the alphabetical order":{"prefix":["1locsort","1locString"],"body":["${1:/**\n * Sort the characters of a string in the alphabetical order"," * https://github.com/1milligram/1loc/blob/master/snippets/string/sort-the-characters-of-a-string-in-the-alphabetical-order.md","*/","}const sort = (str: string): string => str.split('').sort((a, b) => a.localeCompare(b)).join('');;"],"description":"Sort the characters of a string in the alphabetical order"},"Strip ANSI codes from a string":{"prefix":["1locstripAnsiCodes","1locString"],"body":["${1:/**\n * Strip ANSI codes from a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/strip-ansi-codes-from-a-string.md","*/","}const stripAnsiCodes = (str: string): string => str.replace(/[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');;"],"description":"Strip ANSI codes from a string"},"Swap case of characters in a string":{"prefix":["1locswapCase","1locString"],"body":["${1:/**\n * Swap case of characters in a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/swap-case-of-characters-in-a-string.md","*/","}const swapCase = (str: string): string => str.split('').map((c) => (c === c.toLowerCase() ? c.toUpperCase() : c.toLowerCase())).join('');;"],"description":"Swap case of characters in a string"},"Trim slashes at the beginning and the end of a string":{"prefix":["1loctrimSlashes","1locString"],"body":["${1:/**\n * Trim slashes at the beginning and the end of a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/trim-slashes-at-the-beginning-and-the-end-of-a-string.md","\n  // Similar üëáüèº","  const trimSlashes = (str: string): string => str.split('/').filter(Boolean).join('/');","*/","}const trimSlashes = (str: string): string => str.replace(/^\\/+|\\/+$/g, '');"],"description":"Trim slashes at the beginning and the end of a string"},"Trim some character":{"prefix":["1loctrim","1locString"],"body":["${1:/**\n * Trim some character"," * https://github.com/1milligram/1loc/blob/master/snippets/string/trim-some-character.md","*/","}const trim = (str: string, char: string): string => str.split(char).filter(Boolean).join();;"],"description":"Trim some character"},"Trim the file extension from a file name":{"prefix":["1loctrimExt","1locString"],"body":["${1:/**\n * Trim the file extension from a file name"," * https://github.com/1milligram/1loc/blob/master/snippets/string/trim-the-file-extension-from-a-file-name.md","*/","}const trimExt = (fileName: string): string => (fileName.indexOf('.') === -1 ? fileName : fileName.split('.').slice(0, -1).join('.'));;"],"description":"Trim the file extension from a file name"},"Truncate a string at full words":{"prefix":["1loctruncate","1locString"],"body":["${1:/**\n * Truncate a string at full words"," * https://github.com/1milligram/1loc/blob/master/snippets/string/truncate-a-string-at-full-words.md","*/","}const truncate = (str: string, max: number, suffix: string = '...'): string => (str.length < max ? str : `${str.substr(0, str.substr(0, max - suffix.length).lastIndexOf(' '))}${suffix}`);;"],"description":"Truncate a string at full words"},"Unescape HTML special characters":{"prefix":["1locunescape","1locString"],"body":["${1:/**\n * Unescape HTML special characters"," * https://github.com/1milligram/1loc/blob/master/snippets/string/unescape-html-special-characters.md","*/","}const unescape = (str: string): string => str.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#0*39;/g, \"'\").replace(/&quot;/g, '\"');;"],"description":"Unescape HTML special characters"},"Uppercase the first character of each word in a string":{"prefix":["1locuppercaseWords","1locString"],"body":["${1:/**\n * Uppercase the first character of each word in a string"," * https://github.com/1milligram/1loc/blob/master/snippets/string/uppercase-the-first-character-of-each-word-in-a-string.md","\n  // Similar üëáüèº","  const uppercaseWords = (str: string): string => str.replace(/^(.)|\\s+(.)/g, (c) => c.toUpperCase());","*/","}const uppercaseWords = (str: string): string => str.split(' ').map((w) => `${w.charAt(0).toUpperCase()}${w.slice(1)}`).join(' ');"],"description":"Uppercase the first character of each word in a string"},"Check if a character is a digit":{"prefix":["1locisDigit","1locValidator"],"body":["${1:/**\n * Check if a character is a digit"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-character-is-a-digit.md","\n  // Similar üëáüèº","  const isDigit = (char: string): boolean => char.length === 1 && c >= '0' && c <= '9'","  const isDigit = (char: string): boolean => Boolean([true, true, true, true, true, true, true, true, true, true][char]);","*/","}const isDigit = (char: string): boolean => char < 10;"],"description":"Check if a character is a digit"},"Check if a date is a weekday":{"prefix":["1locisWeekday","1locValidator"],"body":["${1:/**\n * Check if a date is a weekday"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-date-is-a-weekday.md","*/","}const isWeekday = (date = new Date()): boolean => date.getDay() % 6 !== 0;;"],"description":"Check if a date is a weekday"},"Check if a date is a weekend":{"prefix":["1locisWeekend","1locValidator"],"body":["${1:/**\n * Check if a date is a weekend"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-date-is-a-weekend.md","*/","}const isWeekend = (date = new Date()): boolean => date.getDay() % 6 === 0;;"],"description":"Check if a date is a weekend"},"Check if a date is between two dates":{"prefix":["1locisBetween","1locValidator"],"body":["${1:/**\n * Check if a date is between two dates"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-date-is-between-two-dates.md","*/","}const isBetween = (date: Date, min: Date, max: Date): boolean => date.getTime() >= min.getTime() && date.getTime() <= max.getTime();;"],"description":"Check if a date is between two dates"},"Check if a date is today":{"prefix":["1locisToday","1locValidator"],"body":["${1:/**\n * Check if a date is today"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-date-is-today.md","*/","}const isToday = (date: Date): boolean => date.toISOString().slice(0, 10) === new Date().toISOString().slice(0, 10);;"],"description":"Check if a date is today"},"Check if a date occurs in the current year":{"prefix":["1locisCurrentYear","1locValidator"],"body":["${1:/**\n * Check if a date occurs in the current year"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-date-occurs-in-the-current-year.md","*/","}const isCurrentYear = (date: Date): boolean => date.getUTCFullYear() === new Date().getUTCFullYear();;"],"description":"Check if a date occurs in the current year"},"Check if a flat array has duplicate values":{"prefix":["1lochasDuplicateValues","1locValidator"],"body":["${1:/**\n * Check if a flat array has duplicate values"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-flat-array-has-duplicate-values.md","*/","}const hasDuplicateValues = <T,_>(arr: T[]): boolean => new Set(arr).size !== arr.length;;"],"description":"Check if a flat array has duplicate values"},"Check if a given integer is a prime number":{"prefix":["1locisPrime","1locValidator"],"body":["${1:/**\n * Check if a given integer is a prime number"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-given-integer-is-a-prime-number.md","*/","}const isPrime = (n: number): boolean => n > 1 && Array(Math.floor(Math.sqrt(n)) - 1).fill(0).map((_, i) => i + 2).every((i) => n % i !== 0);;"],"description":"Check if a given integer is a prime number"},"Check if a number is a power of 2":{"prefix":["1locisPowerOfTwo","1locValidator"],"body":["${1:/**\n * Check if a number is a power of 2"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-number-is-a-power-of-2.md","*/","}const isPowerOfTwo = (n: number): boolean => (n & (n - 1)) === 0;;"],"description":"Check if a number is a power of 2"},"Check if a number is even":{"prefix":["1locisEven","1locValidator"],"body":["${1:/**\n * Check if a number is even"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-number-is-even.md","\n  // Similar üëáüèº","  const isEven = (n: number): boolean => (n & 1) === 0","  const isEven = (n: number): boolean => !(n & 1)","  const isEven = (n: number): boolean => Number.isInteger(n / 2);","*/","}const isEven = (n: number): boolean => n % 2 === 0;"],"description":"Check if a number is even"},"Check if a number is in a given range":{"prefix":["1locinRange","1locValidator"],"body":["${1:/**\n * Check if a number is in a given range"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-number-is-in-a-given-range.md","*/","}const inRange = (num: number, a: number, b: number, threshold: number = 0): boolean => Math.min(a, b) - threshold <= num && num <= Math.max(a, b) + threshold;;"],"description":"Check if a number is in a given range"},"Check if a number is negative":{"prefix":["1locisNegative","1locValidator"],"body":["${1:/**\n * Check if a number is negative"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-number-is-negative.md","\n  // Similar üëáüèº","  const isNegative = (n: number): boolean => n < 0;","*/","}const isNegative = (n: number): boolean => Math.sign(n) === -1;"],"description":"Check if a number is negative"},"Check if a number is odd":{"prefix":["1locisOdd","1locValidator"],"body":["${1:/**\n * Check if a number is odd"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-number-is-odd.md","\n  // Similar üëáüèº","  const isOdd = (n: number): boolean => !!(n & 1)","  const isOdd = (n: number): boolean => !Number.isInteger(n / 2);","*/","}const isOdd = (n: number): boolean => n % 2 !== 0;"],"description":"Check if a number is odd"},"Check if a number is positive":{"prefix":["1locisPositive","1locValidator"],"body":["${1:/**\n * Check if a number is positive"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-number-is-positive.md","*/","}const isPositive = (n: number): boolean => Math.sign(n) === 1;;"],"description":"Check if a number is positive"},"Check if a string contains lower case characters":{"prefix":["1loccontainsLowerCase","1locValidator"],"body":["${1:/**\n * Check if a string contains lower case characters"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-contains-lower-case-characters.md","*/","}const containsLowerCase = (str: string): boolean => str !== str.toUpperCase();;"],"description":"Check if a string contains lower case characters"},"Check if a string contains only ASCII characters":{"prefix":["1locisAscii","1locValidator"],"body":["${1:/**\n * Check if a string contains only ASCII characters"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-contains-only-ascii-characters.md","*/","}const isAscii = (str: string): boolean => /^[\\x00-\\x7F]+$/.test(str);;"],"description":"Check if a string contains only ASCII characters"},"Check if a string contains only digits":{"prefix":["1locisNumeric","1locValidator"],"body":["${1:/**\n * Check if a string contains only digits"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-contains-only-digits.md","*/","}const isNumeric = (str: string): boolean => !/[^0-9]/.test(str);;"],"description":"Check if a string contains only digits"},"Check if a string contains only letters and numbers":{"prefix":["1locisAlphanumeric","1locValidator"],"body":["${1:/**\n * Check if a string contains only letters and numbers"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-contains-only-letters-and-numbers.md","*/","}const isAlphanumeric = (str: string): boolean => /^[0-9A-Z]+$/i.test(str);;"],"description":"Check if a string contains only letters and numbers"},"Check if a string contains only letters":{"prefix":["1locisAlpha","1locValidator"],"body":["${1:/**\n * Check if a string contains only letters"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-contains-only-letters.md","*/","}const isAlpha = (str: string): boolean => /^[A-Z]+$/i.test(str);;"],"description":"Check if a string contains only letters"},"Check if a string contains upper case characters":{"prefix":["1loccontainsUpperCase","1locValidator"],"body":["${1:/**\n * Check if a string contains upper case characters"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-contains-upper-case-characters.md","*/","}const containsUpperCase = (str: string): boolean => str !== str.toLowerCase();;"],"description":"Check if a string contains upper case characters"},"Check if a string contains whitespace":{"prefix":["1loccontainsWhitespace","1locValidator"],"body":["${1:/**\n * Check if a string contains whitespace"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-contains-whitespace.md","*/","}const containsWhitespace = (str: string): boolean => (str) => /\\s/.test(str);;"],"description":"Check if a string contains whitespace"},"Check if a string is a hexadecimal color":{"prefix":["1locisHexColor","1locValidator"],"body":["${1:/**\n * Check if a string is a hexadecimal color"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-is-a-hexadecimal-color.md","*/","}const isHexColor = (color: string): boolean => /^#([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i.test(color);;"],"description":"Check if a string is a hexadecimal color"},"Check if a string is a hexadecimal number":{"prefix":["1locisHexadecimal","1locValidator"],"body":["${1:/**\n * Check if a string is a hexadecimal number"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-is-a-hexadecimal-number.md","\n  // Similar üëáüèº","  const isHexadecimal = (str: string): boolean => str.split('').every((c) => '0123456789ABCDEFabcdef'.indexOf(c) !== -1);","*/","}const isHexadecimal = (str: string): boolean => /^[A-F0-9]+$/i.test(str);"],"description":"Check if a string is a hexadecimal number"},"Check if a string is a MongoDB ObjectId":{"prefix":["1locisMongoId","1locValidator"],"body":["${1:/**\n * Check if a string is a MongoDB ObjectId"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-is-a-mongo-db-object-id.md","\n  // Similar üëáüèº","  const isMongoId = (str: string): boolean => str.length === 24 && str.split('').every((c) => '0123456789ABCDEFabcdef'.indexOf(c) !== -1);","*/","}const isMongoId = (str: string): boolean => str.length === 24 && /^[A-F0-9]+$/i.test(str);"],"description":"Check if a string is a MongoDB ObjectId"},"Check if a string is an octal number":{"prefix":["1locisOctal","1locValidator"],"body":["${1:/**\n * Check if a string is an octal number"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-is-an-octal-number.md","*/","}const isOctal = (str: string): boolean => /^(0o)?[0-7]+$/i.test(str);;"],"description":"Check if a string is an octal number"},"Check if a string is lower case":{"prefix":["1locisLowerCase","1locValidator"],"body":["${1:/**\n * Check if a string is lower case"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-is-lower-case.md","*/","}const isLowerCase = (str: string): boolean => str === str.toLowerCase();;"],"description":"Check if a string is lower case"},"Check if a string is upper case":{"prefix":["1locisUpperCase","1locValidator"],"body":["${1:/**\n * Check if a string is upper case"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-string-is-upper-case.md","*/","}const isUpperCase = (str: string): boolean => str === str.toUpperCase();;"],"description":"Check if a string is upper case"},"Check if a value is a business identifier code":{"prefix":["1locisBIC","1locValidator"],"body":["${1:/**\n * Check if a value is a business identifier code"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-value-is-a-business-identifier-code.md","*/","}const isBIC = (value: string): boolean => /^[a-zA-Z]{6}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?$/.test(value);;"],"description":"Check if a value is a business identifier code"},"Check if a value is a number":{"prefix":["1locisNumber","1locValidator"],"body":["${1:/**\n * Check if a value is a number"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-value-is-a-number.md","*/","}const isNumber = (value: any): number => !isNaN(parseFloat(value)) && isFinite(value);;"],"description":"Check if a value is a number"},"Check if a value is a plain object":{"prefix":["1locisPlainObject","1locValidator"],"body":["${1:/**\n * Check if a value is a plain object"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-value-is-a-plain-object.md","*/","}const isPlainObject = (v: any): boolean => !!v && typeof v === 'object' && (v.__proto__ === null || v.__proto__ === Object.prototype);;"],"description":"Check if a value is a plain object"},"Check if a value is a regular expression":{"prefix":["1locisRegExp","1locValidator"],"body":["${1:/**\n * Check if a value is a regular expression"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-value-is-a-regular-expression.md","*/","}const isRegExp = (value: any): boolean => Object.prototype.toString.call(value) === '[object RegExp]';;"],"description":"Check if a value is a regular expression"},"Check if a value is a string":{"prefix":["1locisString","1locValidator"],"body":["${1:/**\n * Check if a value is a string"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-value-is-a-string.md","*/","}const isString = (value: any): boolean => Object.prototype.toString.call(value) === '[object String]';;"],"description":"Check if a value is a string"},"Check if a value is an object":{"prefix":["1locisObject","1locValidator"],"body":["${1:/**\n * Check if a value is an object"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-value-is-an-object.md","*/","}const isObject = (v: any): boolean => v !== null && typeof v === 'object';;"],"description":"Check if a value is an object"},"Check if a value is base32 encoded":{"prefix":["1locisBase32","1locValidator"],"body":["${1:/**\n * Check if a value is base32 encoded"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-value-is-base32-encoded.md","*/","}const isBase32 = (value: string): boolean => value.length % 8 === 0 && /^[A-Z2-7]+=*$/.test(value);;"],"description":"Check if a value is base32 encoded"},"Check if a value is base58 encoded":{"prefix":["1locisBase58","1locValidator"],"body":["${1:/**\n * Check if a value is base58 encoded"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-value-is-base58-encoded.md","*/","}const isBase58 = (value: string): boolean => /^[A-HJ-NP-Za-km-z1-9]*$/.test(value);;"],"description":"Check if a value is base58 encoded"},"Check if a value is base64 encoded":{"prefix":["1locisBase64","1locValidator"],"body":["${1:/**\n * Check if a value is base64 encoded"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-value-is-base64-encoded.md","*/","}const isBase64 = (value: string): boolean => /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/.test(value);;"],"description":"Check if a value is base64 encoded"},"Check if a value is nil":{"prefix":["1locisNil","1locValidator"],"body":["${1:/**\n * Check if a value is nil"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-value-is-nil.md","*/","}const isNil = (value: any): boolean => value == null;;"],"description":"Check if a value is nil"},"Check if a year is leap year":{"prefix":["1locisLeapYear","1locValidator"],"body":["${1:/**\n * Check if a year is leap year"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-a-year-is-leap-year.md","\n  // Similar üëáüèº","  const isLeapYear = (year: number): boolean => new Date(year, 1, 29).getDate() === 29;","*/","}const isLeapYear = (year: number): boolean => (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;"],"description":"Check if a year is leap year"},"Check if all array elements are equal to a given value":{"prefix":["1locisEqual","1locValidator"],"body":["${1:/**\n * Check if all array elements are equal to a given value"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-all-array-elements-are-equal-to-a-given-value.md","\n  // Similar üëáüèº","  const isEqual = <T,_>(arr: T[], value: T): boolean => !arr.some((item) => item !== value);","*/","}const isEqual = <T,_>(arr: T[], value: T): boolean => arr.every((item) => item === value);"],"description":"Check if all array elements are equal to a given value"},"Check if all items in an array are equal":{"prefix":["1locareEqual","1locValidator"],"body":["${1:/**\n * Check if all items in an array are equal"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-all-items-in-an-array-are-equal.md","\n  // Similar üëáüèº","  const areEqual = <T,_>(arr: T[]): boolean => new Set(arr).size === 1;","*/","}const areEqual = <T,_>(arr: T[]): boolean => arr.length > 0 && arr.every((item) => item === arr[0]);"],"description":"Check if all items in an array are equal"},"Check if an array contains a value matching some criterias":{"prefix":["1loccontains","1locValidator"],"body":["${1:/**\n * Check if an array contains a value matching some criterias"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-an-array-contains-a-value-matching-some-criterias.md","\n  // Similar üëáüèº","  const contains = <T,_>(arr: T[], criteria: (a: T) => boolean): boolean => arr.some(criteria)","  const contains = <T,_>(arr: T[], criteria: (a: T) => boolean): boolean => arr.filter(criteria).length > 0;","*/","}const contains = <T,_>(arr: T[], criteria: (a: T) => boolean): boolean => arr.some((v) => criteria(v));"],"description":"Check if an array contains a value matching some criterias"},"Check if an array is not empty":{"prefix":["1locisNotEmpty","1locValidator"],"body":["${1:/**\n * Check if an array is not empty"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-an-array-is-not-empty.md","*/","}const isNotEmpty = (arr: any): boolean => Array.isArray(arr) && Object.keys(arr).length > 0;;"],"description":"Check if an array is not empty"},"Check if an array is subset of other array":{"prefix":["1locisSubset","1locValidator"],"body":["${1:/**\n * Check if an array is subset of other array"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-an-array-is-subset-of-other-array.md","\n  // Similar üëáüèº","  const isSubset = <T,_>(a: T[], b: T[]): boolean => b.join('|').includes(a.join('|'));","*/","}const isSubset = <T,_>(a: T[], b: T[]): boolean => new Set(b).size === new Set(b.concat(a)).size;"],"description":"Check if an array is subset of other array"},"Check if an object is a Promise":{"prefix":["1locisPromise","1locValidator"],"body":["${1:/**\n * Check if an object is a Promise"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-an-object-is-a-promise.md","*/","}const isPromise = (obj: any): boolean => !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';;"],"description":"Check if an object is a Promise"},"Check if an object is an array":{"prefix":["1locisArray","1locValidator"],"body":["${1:/**\n * Check if an object is an array"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-an-object-is-an-array.md","*/","}const isArray = (obj: any): boolean => Array.isArray(obj);;"],"description":"Check if an object is an array"},"Check if an object is empty":{"prefix":["1locisEmpty","1locValidator"],"body":["${1:/**\n * Check if an object is empty"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/check-if-an-object-is-empty.md","\n  // Similar üëáüèº","  const isEmpty = (obj: object): boolean => JSON.stringify(obj) === '{}';","*/","}const isEmpty = (obj: object): boolean => Reflect.ownKeys(obj).length === 0 && obj.constructor === Object;"],"description":"Check if an object is empty"},"Validate a Gregorian date":{"prefix":["1locisValidDate","1locValidator"],"body":["${1:/**\n * Validate a Gregorian date"," * https://github.com/1milligram/1loc/blob/master/snippets/validator/validate-a-gregorian-date.md","*/","}const isValidDate = (m: number, d: number, y: number): boolean => 0 <= m && m <= 11 && 0 < y && y < 32768 && 0 < d && d <= new Date(y, m, 0).getDate();;"],"description":"Validate a Gregorian date"}}